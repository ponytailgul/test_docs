
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Linq;
using System.Collections.Generic;
using MAS.Framework.Logging;
using System.Windows;
using CustomMssgBox;


//using SerialPortLib;

namespace OmegaScript
{
    //Note: this must NOT include OmegaScriptCommon.IOmegaScript interface!

    public partial class OmegaProtocolScript
    {
        public bool protocolRunning = false;

        bool ZmqSupport = false; //Required

        

        int ScriptRunTimeSeconds = 330;
        int UtilityRunTimeSeconds = 10;
        int ScriptInitTimeSeconds = 20;
        DateTime ScriptStartTime;

        Random randomSec = new Random();

        //can delete coordiantor instance later 
        

        int ProtocolStepNum = 0;

        private int MachineState = 0;

        /*
        public void ScriptRun(int scriptInstance)
        {
            //scriptInstance is a number (1 or 2) to designate the instance ID of this script

            System.Windows.Forms.MessageBox.Show(scriptInstance.ToString());

            myServerScript.Test("hola from instance " + scriptInstance.ToString());

            ScriptRun();

        }
        */

        public string r1Source;
        public string r2Source;
        public double disruptVol;
        public double washVol;
        public int disruptCycles;
        public int incubateCycles;
        public string mySpecies;
        public string runOutput;
        public string disruptionStyle;
        public string tissue;
        public bool predisruptChoice;
        public bool reverse;
        public int incTime;
        public string mixingStyle;
        public int mixingSpeed;
        public int disruptionSpeed;
        public int vertSpeed;
        public string runTemp;
        public string reagentSource;
        public int[] testArray = { 8 }; 
        public int[] nucSteps = { 1, 2, 4, 5, 6, 5, 7 };
        public int[] cellSteps = { 1, 2, 3, 4, 5, 6, 5, 6, 5, 7 };
        public int[] cellLungSteps = { 1, 2, 3, 4, 3, 4, 5, 6, 5, 6, 5, 7 };
        public int[] cellpreDisruptSteps = { 1, 2, 8, 3, 4, 5, 6, 5, 6, 5, 7 };
        public int[] runSteps;
        public bool wasRunning;
        public bool tempOffFlag = false; 
        bool firstWashComplete = false;

        public bool notified = false;
        public bool flushSingleShot = false;
        public bool flushCannulas = false;

        public bool waitedfortemp = false;

        public DateTime beginTime = DateTime.UtcNow;
        public DateTime finishTime = DateTime.UtcNow;

        List<bool> asyncPrime = new List<bool>();

        public ProtocolParams pParams;
        public TimedMssgBox.frmTimedMssgBox msgBox;
        CustomMssgBox.CustomMssgBox cusMsgBox2 = new CustomMssgBox.CustomMssgBox();

        

        public int TempTimeOut()
        {
            //throw up timed message box
            //if yes then restart cooling timer
            //if no then change machineState
            //if unclicked then turn off and log

            if (ScriptInstanceNumber == 1)
            {
                msgBox = new TimedMssgBox.frmTimedMssgBox("Continue Controling Bay1 Temperature?", "Instrument Cooling/Heating will be turned off in 15 minutes.\nContinue cooling/heating instrument?", 15);
            } else
            {
                msgBox = new TimedMssgBox.frmTimedMssgBox("Continue Controling Bay2 Temperature?", "Instrument Cooling/Heating will be turned off in 15 minutes.\nContinue cooling/heating instrument?", 15);
            }
            msgBox.ShowDialog();
            if (msgBox.Result == -1)
            {
                ScriptLog(Severity.Control, "User chose to stop controling.");
                return 0;
            }
            else if (msgBox.Result == 0)
            {
                ScriptLog(Severity.Control, "Instrument cooling turned off due to inactivity.");
                tempOffFlag = true;
                return 0;
            }
            else
            {
                ScriptLog(Severity.Control, "User chose to continue cooling.");
                if (MachineState == 2)
                {
                    return 2;
                }
                if (MachineState == 3)
                {
                    return 3;
                }
                return 0;
            }
        }

        public void RefreshProtocolParameters()
        {
            //This will deserialize any serialized parameter set sent by the host

            ScriptLog(Severity.Control, "Getting Protocol Parameters...");
            pParams = new ProtocolParams();

            if (SerializedProtocolParameters == "")
                return; //looks like our host screwed up!
            else
                ScriptLog(Severity.Control, SerializedProtocolParameters);

            pParams = pParams.FromJSON(SerializedProtocolParameters);

        }

        public void TranslateParameters()
        {
            int[] ZSpeed = { 5000, 10000, 20000, 30000, 40000 };

            #region Run type, Notes, etc

            mySpecies = ((Species)pParams.Species).ToString();
            runOutput = ((CellType)pParams.CellType).ToString();
            tissue = ((TissueType)pParams.TissueType).ToString();
            runTemp = ((Temperature)pParams.ControlParameters.IncubationTemp).ToString();
            reverse = (pParams.ControlParameters.Xtra == 3) ? true : false;

            #endregion

            #region Delivery Values
            r1Source = ((ReagentSource)pParams.ControlParameters.ReagentOneSource).ToString();
            r2Source = ((ReagentSource)pParams.ControlParameters.ReagentTwoSource).ToString();
            washVol = 2.0;

            #endregion

            #region Incubation Values
            incTime = pParams.ControlParameters.IncubationTime;
            incubateCycles = pParams.ControlParameters.IncubateAmt; //don't need to rely on xtra's value & irrelevant since it will be included in the RunArray
            mixingStyle = ((MixingType)pParams.ControlParameters.MixingType).ToString();
            mixingSpeed = 45 + (pParams.ControlParameters.MixingSpeed * 25);
            #endregion

            #region Disruption Values
            predisruptChoice = pParams.ControlParameters.MinceAuto;
            disruptVol = pParams.ControlParameters.DisruptVol;
            disruptCycles = pParams.ControlParameters.DisruptAmt;
            disruptionSpeed = 45 + (pParams.ControlParameters.DisruptionSpeed * 25);
            disruptionStyle = (runOutput == "Cells") ? ((CellDisruptType)pParams.ControlParameters.DisruptionType).ToString() : ((NucleiDisruptType)pParams.ControlParameters.DisruptionType).ToString();
            if (disruptionStyle == "Nuclei_Dounce" || disruptionStyle == "Cell_Triturate") { vertSpeed = ZSpeed[pParams.ControlParameters.DisruptionSpeed]; }
            #endregion

            #region Run Array

            if (pParams.ControlParameters.runArray[0] > 7)
            {
                if (runOutput == "Nuclei")
                {
                    runSteps = nucSteps;
                }
                else
                {
                    if (tissue == "Lung")
                    {
                        runSteps = cellLungSteps;
                    }
                    else
                    {
                        if (predisruptChoice == true)
                        {
                            runSteps = cellpreDisruptSteps;
                        }
                        else
                        {
                            runSteps = cellSteps;
                        }
                    }

                }
            }
            else
            {
                if (predisruptChoice && !Array.Exists(pParams.ControlParameters.runArray, element => element == 8))
                {
                    int[] newArr = new int[pParams.ControlParameters.runArray.Length + 1];
                    for (int i = 0; i < newArr.Length; i++)
                    {
                        if (i < 2)
                        {
                            newArr[i] = pParams.ControlParameters.runArray[i];
                        }
                        else if (i == 2)
                        {
                            newArr[i] = 8;
                        }
                        else
                        {
                            newArr[i] = pParams.ControlParameters.runArray[i - 1];
                        }
                    }
                    runSteps = newArr;
                }
                else if (!predisruptChoice && Array.Exists(pParams.ControlParameters.runArray, element => element == 8))
                {
                    //need to remove predisrupt value from run array
                    for (int i = 0; i < pParams.ControlParameters.runArray.Length; i++)
                    {
                        if (pParams.ControlParameters.runArray[i] == 8)
                        {
                            pParams.ControlParameters.runArray[i] = 0;
                        }
                    }
                    runSteps = pParams.ControlParameters.runArray;
                }
                else
                {
                    runSteps = pParams.ControlParameters.runArray;
                }
            }

            #endregion

            ScriptLog(Severity.Info, "Running Protocol: " + pParams.ProtocolName);
            ScriptLog(Severity.Info, "Species: " + mySpecies + ", Tissue: " + tissue + ", Output: " + runOutput);
            ScriptLog(Severity.Info, "Incubation: Cycles = " + incubateCycles + ", Time = " + incTime + ", Temp = " + runTemp);
            ScriptLog(Severity.Info, "Mixing Style = " + mixingStyle + ", Speed = " + mixingSpeed);
            ScriptLog(Severity.Info, "Disruption: Cycles = " + disruptCycles + ", Style = " + disruptionStyle + ", Speed = " + disruptionSpeed);
            ScriptLog(Severity.Info, "Disruption Vol = " + disruptVol + ", Predisrupt? = " + predisruptChoice + ", Reagent Source = " + r1Source);
            ScriptLog(Severity.Info, $"Enzyme Reagent Source = {r1Source} || Buffer Reagent Source = {r2Source}");
            ScriptLog(Severity.Info, "Run Name: " + pParams.RunParameters.RunName + ", User: " + pParams.RunParameters.User + ", Tissue Amt: " + pParams.RunParameters.TissueAmount);
            ScriptLog(Severity.Info, "Run Notes: " + pParams.RunParameters.RunNotes);
        }

        public void ScriptRun()
        {
            
            //State Machine: 0:Idle / 1:Initializing / 2:Controlling Temp Down / 3: Controlling Temp Up / 4:Running Protocol / 5:Aborting / 98:Error / 99:Terminating

            //System.Diagnostics.Debugger.Launch();
            //System.Diagnostics.Debugger.Break();

            AbortRequestEvent += AbortRequestEventHandler;
            BumpScriptEvent += BumpScriptEventHandler;
            SetParametersEvent += SetParametersEventHandler;
            HardwareInitCompleteEvent += HardwareInitializedEventHandler;

            MachineState = 0;

            //We're going to start versioning Bay Scripts so we make sure the right script is running in the GUI
            ScriptLog(Severity.Control, "Running Bay Script Ver. 12-07-22");

            while (MachineState != 99)
            {
                switch (MachineState)
                {
                    case 0: //idle
                        Coordinator.LEDsSetPixelPattern(ScriptName, "VerticalStage", (short)ScriptInstanceNumber, 0, 0); //LED 2 or 3 Off
                        ScriptLog(Severity.Control, "Idling"); //Need to come back to this to clean it up
                        LogStateChange(MachineState, 0);
                        //if (Coordinator != null)
                        ScriptLog(Severity.Control, "Stopping Temp");
                        Coordinator.StopControlling(ScriptName, "CartridgeTempControllerMAS");
                        ScriptLog(Severity.Control, "Stopped Temp");
                        //System.Windows.Forms.MessageBox.Show("Getting Control Temp");
                        //double temp1 = Coordinator.GetControlTemperature(myScriptName, "CartridgeTempControllerMAS");
                        //System.Windows.Forms.MessageBox.Show(temp1.ToString());
                        //ScriptLog(Severity.Info, "Start Temp: " + temp1.ToString());
                        //Idle();
                        while (MachineState == 0)
                        {
                            System.Threading.Thread.Sleep(50);
                        }
                        break;
                    case 1: //initializing
                        //wait for event indicating that our server has finished initializing hardware (BumpScript event)
                        //Initialize(ScriptInitTimeSeconds);
                        ScriptLog(Severity.Control, "Initializing");
                        while (MachineState == 1)
                        {
                            System.Threading.Thread.Sleep(50);
                        }
                        MachineState = 0;
                        break;
                    case 2: //controlling temp down
                        ScriptLog(Severity.Control, "Bay Cooling");
                        ControlTemperatureCool();
                        ScriptLog(Severity.Control, "Bay Cooled");
                        break;
                    case 3: //controlling temp up
                        ScriptLog(Severity.Control, "Bay Heating");
                        ControlTemperatureHeat();
                        ScriptLog(Severity.Control, "Bay Heated");
                        break;
                    case 4: //running protocol
                        ScriptLog(Severity.Info, $"myMS: {MachineState}");
                        protocolRunning = true;
                        //Coordinator.CheckRunningAndSetTimerState();
                        Coordinator.LEDsSetPixelPattern(ScriptName, "VerticalStage", (short)ScriptInstanceNumber, 2, 2); //LED 2 or 3 blinking green
                        RunProtocol();
                        Coordinator.LEDsSetPixelPattern(ScriptName, "VerticalStage", (short)ScriptInstanceNumber, 0, 3); //LED 2 or 3 solid blue
                        protocolRunning = false;
                        //Coordinator.CheckRunningAndSetTimerState();
                        ScriptLog(Severity.Info, $"myMS: {MachineState}");
                        break;
                    case 5: //aborting
                        ScriptLog(Severity.Info, "Instrument Aborting Run");
                        Coordinator.LEDsSetPixelPattern(ScriptName, "VerticalStage", (short)ScriptInstanceNumber, 2, 4); //LED 2 or 3 blinking purple
                        AbortRun();
                        ScriptLog(Severity.Info, "Instrument Aborted");
                        protocolRunning = false;
                        LogStateChange(MachineState, 0);
                        MachineState = 0;
                        break;
                    case 6: //Utility 1
                        break;
                    case 7: //Utility 2
                        break;
                    case 8: //Utility 3
                        break;
                    case 9: //Utility 4
                        break;

                        #region Unused Cases 
                    case 101: //move vertical stage down 10K steps
                        //verticalStage.MoveToRelPosition(1, 100000); //axis 1
                        Coordinator.MoveToRelPosition(ScriptName, "VerticalDrive", 100000);
                        MachineState = 0;
                        break;
                    case 102: //move vertical stage up 10K steps
                        //verticalStage.MoveToRelPosition(1, 100000); //axis 1
                        Coordinator.MoveToRelPosition(ScriptName, "VerticalDrive", -100000);
                        MachineState = 0;
                        break;
                    case 103: //run DC Motor
                        //rotator.RunConstSpeed(1, 2000);
                        //System.Windows.Forms.MessageBox.Show("Rotate Motor");
                        Coordinator.RunConstSpeed(ScriptName, "RotatorMotor", 2000);
                        MachineState = 0;
                        break;
                    case 104: //stop DC Motor
                        //rotator.MotorStop(1);
                        Coordinator.MotorStop(ScriptName, "RotatorMotor");
                        MachineState = 0;
                        break;
                    case 105: //move pump plunger
                        Coordinator.MoveNoWait(ScriptName, "Pump", 900);
                        MachineState = 0;
                        break;
                    case 106: //move to a pump valve position1
                        Coordinator.MoveToValvePos(ScriptName, "Pump", 1);
                        MachineState = 0;
                        break;
                    case 107: //move to a pump valve position2
                        Coordinator.MoveToValvePos(ScriptName, "Pump", 2);
                        MachineState = 0;
                        break;

                    #endregion

                    case 111: //change camera LED brightness
                        for (int i = 0; i <= 1024; i++)
                        {
                            Coordinator.SetPowerControllerPower(ScriptName, "LEDPower", i * 8);
                            //Thread.Sleep(10);
                        }
                        Coordinator.SetPowerControllerPower(ScriptName, "LEDPower", 0);
                        MachineState = 0;
                        break;

                    case 97:

                        break;
                    case 98: //error
                        Coordinator.MoveToAbsPosition(ScriptName, "VerticalDrive", 0);
                        Coordinator.StopControlling(ScriptName, "CartridgeTempControllerMAS");
                        Coordinator.InitPump(ScriptName, "Pump");
                        Coordinator.MotorStop(ScriptName, "RotatorMotor");
                        ScriptLog(Severity.Info, "Instrument Safe");
                        while (MachineState == 98)
                        {
                            Thread.Sleep(1000);
                        }
                        break;
                }
            }

            return;
            
        }

        public void ControlTemperatureCool()
        {
            //We can get a new temp control request (heat, cool, stop) or a run request

            waitedfortemp = false;
            ControlTemperature(2);
            var mbTempCountdown = DateTime.UtcNow;
            while (MachineState == 2)
            {
                waitedfortemp = true;
                if (((DateTime.UtcNow - mbTempCountdown).TotalMinutes > 30) && MachineState == 2)
                {
                    MachineState = TempTimeOut();
                    if (MachineState == 2)
                    {
                        mbTempCountdown = DateTime.UtcNow;
                    }
                    else
                    {
                        LogStateChange(2, 0);
                        MachineState = 0;
                    }
                }
                ReportTemp();
                Thread.Sleep(100);
                Application.DoEvents();
            }
        }

        public void ControlTemperatureHeat()
        {
            //We can get a new temp control request (heat, cool, stop) or a run request
            waitedfortemp = false;
            ControlTemperature(3);
            var mbTempCountdown = DateTime.UtcNow;
            while (MachineState == 3)
            {
                waitedfortemp = true;
                if (((DateTime.UtcNow - mbTempCountdown).TotalMinutes > 30) && MachineState == 3)
                {
                    MachineState = TempTimeOut();
                    if (MachineState == 3)
                    {
                        mbTempCountdown = DateTime.UtcNow;
                    }
                    else
                    {
                        LogStateChange(3, 0);
                        MachineState = 0;
                    }
                }
                ReportTemp();
                Thread.Sleep(100);
                Application.DoEvents();
            }
        }

        private void RunProtocol()
        {
            flushSingleShot = false;
            flushCannulas = false;
            bool reagentPrimed = false;
            firstWashComplete = false;

            int engageTime = 0;
            int deliveryTime = 0;
            int disruptTime = 0;
            int strainTime = 0;
            int washTime = 0;
            int endRunTime = 0;
            int preDisruptTime = 0;

            //First refresh the protocol parameters in case the host sent us new ones:
            RefreshProtocolParameters();

            TranslateParameters();

            //   //System.Diagnostics.Debugger.Launch();
            //   //System.Diagnostics.Debugger.Break();

            //New way of structuring script is going to be in a loop format with cases
            //traditional nuclei script has how many steps? 1: engage + prime, 2: deliver, 4: disrupt + prime, 5: strain, 6: rinse, 5: strain, 7: end (7 steps)
            //traditional cell script has how many steps? 1: engage + prime, 2: deliver, 3: incubate, 4: disrupt + prime, 5: strain, 6: rinse, 5: strain, 6: rinse, 5: strain, 7: end (10 steps)

            #region For Testing purposes
            //runSteps = testArray;
            //double washVol = 2.0;
            //r1Source = "Chiller"; //Chiller
            //r2Source = "Chiller";
            //runOutput = "Nuclei"; //Nuclei or Cells
            //incTime = 50;
            //disruptVol = 2.0;
            //mixingStyle = "Top";
            //mixingSpeed = 135;
            //tissue = "none";
            //disruptionStyle = "Nuclei_Default";
            //disruptionSpeed = 135;
            //runTemp = "37C";
            //bool abortRequested = false;
            //reagentSource = "Singleshot";
            #endregion

            #region Calculate Run Time
            //create totalTime value
            //create for loop going through each runStep
            //for each runStep figure out step integer and then add step time to totalTime
            ScriptLog(Severity.Info, "Calculating Run Time...");

            int totalTime = 0;
            for (int a = 0; a < runSteps.Count(); a++)
            {
                //engage time
                if (runSteps[a] == 1)
                {
                    if (r1Source == "Chiller")
                    {
                        engageTime = 50;
                    }
                    else
                    {
                        engageTime = 10; //done
                    }
                    totalTime = totalTime + engageTime; //done
                }
                //delivery (need to look at single shot) //delivery(step 2) will always be defined in the run array
                else if (runSteps[a] == 2)
                {
                    if (r1Source == "Chiller")
                    {
                        deliveryTime = 75;
                    }
                    else if (r1Source == "SingleShot")
                    {
                        deliveryTime = 60;
                    }
                    else
                    {
                        deliveryTime = 1;
                    }
                    totalTime = totalTime + deliveryTime;
                }
                //incubation (done)
                else if (runSteps[a] == 3)
                {
                    totalTime = totalTime + (incTime * 60); //done
                }
                //disruption
                //right now we just have nuclei and cell default disruptions defined, we will need lung, cell trit, nuclei dounce and none
                else if (runSteps[a] == 4)
                {
                    if (disruptionStyle == "Nuclei_Default")
                    {
                        disruptTime = 150;
                    }
                    else if (disruptionStyle == "Cell_Default")
                    {
                        disruptTime = 115;
                    }
                    else
                    {
                        disruptTime = 1;
                    }
                    totalTime = totalTime + disruptTime;
                }
                //strain
                else if (runSteps[a] == 5)
                {
                    strainTime = 34;
                    totalTime = totalTime + strainTime;
                }
                //wash
                else if (runSteps[a] == 6)
                {
                    if (r2Source == "Chiller")
                    {
                        washTime = 85;
                    }
                    else
                    {
                        washTime = 75;
                    }
                    totalTime = totalTime + washTime;
                }
                //ending run
                else if (runSteps[a] == 7)
                {
                    if (r1Source == "Chiller")
                    {
                        endRunTime = 40;
                    }
                    else
                    {
                        endRunTime = 204;
                    }
                    totalTime = totalTime + endRunTime;
                }
                //predisrupt
                else if (runSteps[a] == 8)
                {
                    preDisruptTime = 40;
                    totalTime = totalTime + preDisruptTime; //done
                }
                //ScriptRunTimeSeconds = totalTime;
            }
            ScriptRunTimeSeconds = totalTime;

            #endregion

            ScriptLog(Severity.Control, "Expected: " + ScriptRunTimeSeconds.ToString()); //totalTime.ToString()

            //Coordinator.SetPowerControllerPower(ScriptName, "LEDPower", 4000);

            #region Run Loop

            ScriptLog(Severity.Control, "Expected: " + ScriptRunTimeSeconds.ToString()); //totalTime.ToString()

            for (int i = 0; i < runSteps.Count() && !abortRequested; i++)
            {                
                switch (runSteps[i])
                {
                    case 1: //engaging cartridge
                        beginTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Engaging Cartridge " + beginTime);
                        if (r1Source == "Chiller") { PrimeReagentOne(); } //Don't need to prime from singleshot or manual delivery
                        EngageCartridge(); if (abortRequested) goto Aborted; //abortRequested
                        if (r1Source == "Chiller") { WaitPrime(); }
                        finishTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Engaging Cartridge End " + finishTime);
                        ScriptLog(Severity.Control, "Extend: " + ExtendTime(engageTime)); //totalTime.ToString()
                        if (abortRequested) goto Aborted;
                        break;
                    case 2: //delivering reagent to cartridge
                        beginTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Delivering Reagent to Cartridge " + beginTime);
                        Deliver2(r1Source, runOutput, disruptVol);
                        if (runTemp == "Heat") { Coordinator.GoToTemperature(ScriptName, "Phase2"); }
                        finishTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Delivering Reagent to Cartridge End " + finishTime);
                        ScriptLog(Severity.Control, "Extend: " + ExtendTime(deliveryTime)); //totalTime.ToString()
                        if (abortRequested) goto Aborted;
                        break;
                    case 3: //incubating sample
                        beginTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Incubating Sample " + beginTime);
                        if (incTime != 0 && r1Source == "Chiller" && runSteps[i + 1] == 5 && !reagentPrimed) { PrimeReagentTwo(); }
                        if (incTime != 0) { Incubate(disruptVol, incTime, mixingStyle, Convert.ToInt16(mixingSpeed)); if (abortRequested) goto Aborted; }
                        if (incTime != 0 && r1Source == "Chiller" && runSteps[i + 1] == 5 && !reagentPrimed) { WaitPrime(); reagentPrimed = true; }
                        finishTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Incubating Sample End " + finishTime);
                        if (abortRequested) goto Aborted;
                        break;
                    case 4: //disrupting sample
                        beginTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Disrupting Sample " + beginTime);
                        if (r1Source == "Chiller" && runSteps[i + 1] == 5 && !reagentPrimed) { PrimeReagentTwo(); }
                        Disrupt(runOutput, tissue, disruptionStyle, disruptionSpeed); if (abortRequested) goto Aborted;
                        if (r1Source == "Chiller" && runSteps[i + 1] == 5 && !reagentPrimed) { WaitPrime(); reagentPrimed = true; }
                        finishTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Disrupting Sample End " + finishTime);
                        ScriptLog(Severity.Control, "Extend: " + ExtendTime(disruptTime)); //totalTime.ToString()
                        if (abortRequested) goto Aborted;
                        break;
                    case 5: //filtering sample
                        beginTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Filtering Sample " + beginTime);
                        Strain();
                        finishTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Filtering Sample End " + finishTime);
                        ScriptLog(Severity.Control, "Extend: " + ExtendTime(strainTime)); //totalTime.ToString()
                        if (abortRequested) goto Aborted;
                        break;
                    case 6: //cleaning disruption chamber
                        beginTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Cleaning Disruption Chamber " + beginTime);
                        WashLast(r2Source, runOutput, washVol);
                        finishTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Cleaning Disruption Chamber End " + finishTime);
                        firstWashComplete = true;
                        ScriptLog(Severity.Control, "Extend: " + ExtendTime(washTime)); //totalTime.ToString()
                        if (abortRequested) goto Aborted;
                        break;
                    case 7: //ending run
                        beginTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Ending Run " + beginTime);
                        EndRun2(r1Source, r2Source, runTemp); 
                        if (abortRequested) goto Aborted;
                        finishTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Finishing Run " + finishTime);
                        ScriptLog(Severity.Control, "Extend: " + ExtendTime(endRunTime)); //totalTime.ToString()
                        break;
                    case 8: //predisrupt sample
                        beginTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Pre-disrupting Sample " + beginTime);
                        PreDisrupt();
                        finishTime = DateTime.UtcNow;
                        ScriptLog(Severity.Control, "Pre-disrupting Sample End " + finishTime);
                        ScriptLog(Severity.Control, "Extend: " + ExtendTime(preDisruptTime)); //totalTime.ToString()
                        if (abortRequested) goto Aborted;
                        break;
                }
            }
            #endregion

            ScriptLog(Severity.Info, ScriptName + " Successfully Run");

            Aborted:
            if (abortRequested)
            {
                ScriptLog(Severity.Info, "Aborting...");
                //need to add abort sequence in here eventually
                LogStateChange(MachineState, 5);
                MachineState = 5;
                abortRequested = false;
                return;
            }

            //Coordinator.SetPowerControllerPower(ScriptName, "LEDPower", 0);

            ScriptLog(Severity.Info, "Protocol Run Ended");

            MachineState = 0;
            if (runOutput == "Nuclei") MachineState = 2;
            LogStateChange(4, MachineState);

            return;
        }

        /*----------------------------------------------------------------------------------------*/
        public void AbortRun()
        {
            ScriptLog(Severity.Control, "Expected: " + CalcAbortTime());

            #region Stop RoboClaw
            ScriptLog(Severity.Info, "Stopping DC Motor");
            Coordinator.MotorStop(ScriptName, "RotatorMotor");
            #endregion

            #region Stop Temp Controller
            ScriptLog(Severity.Info, "Stopping Temp Control");
            Coordinator.StopControlling(ScriptName, "CartridgeTempControllerMAS");
            #endregion

            #region Deal with Fluidics and Stepper
            ScriptLog(Severity.Info, "Pulling Up Vertical Stage");
            Coordinator.SetMaxSpeed(ScriptName, "VerticalDrive", 30000);
            Coordinator.MoveToAbsPosition(ScriptName, "VerticalDrive", 0);
            ScriptLog(Severity.Info, "Making Fluidics Safe");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 1000);
            //Coordinator.MoveNoWait(ScriptName, "Pump", 0, "Abort"); //KC: couldn't we just init the pump?
            Coordinator.InitPump(ScriptName, "Pump");
            CheckFluidics(10);
            //if (!isReady || MachineState == 98 || abortRequested) return;
            if (flushSingleShot)
            {
                ScriptLog(Severity.Control, "Cleaning out Single Shot Fluidic Lines");
                BlowEnzBuffer();
                RinseEnzBuff();
                RinseEnzBuff();
                BlowEnzBuffer();
                BlowEnzBuffer();
            }
            else
            {
                ScriptLog(Severity.Control, "Cleaning out Common Fluidic Lines");
                //add function for cleaning out common lines
                RinseSyringe();
            }
            if (flushCannulas)
            {
                MessageBox.Show("Please replace sample cartridge then press OK.", "Flushing Cartridge Lines", MessageBoxButtons.OK);
                RinseDisruption();
                BlowDisruption();
            }
            CheckStepper(20);
            #endregion
        }
        /*----------------------------------------------------------------------------------------*/
        
        /*----------------------------------------------------------------------------------------*/
        #region Run Steps

        bool isReady = false;
        Task fluidicTask;
        public int cannCleanSteps = 1200;
        public bool cannClean = false;

        #region Abort Variables
        public bool enzymeLoaded = false;
        public bool deliveryStarted = false;
        public bool deliveryFinished = false;
        public bool incStarted = false;
        public bool incFinished = false;
        public bool aborted = false;
        public bool aborting = false;
        public bool initialized = false;
        public bool cannulaProb = false;
        #endregion

        private void EngageCartridge() //done but need to figure out dc motor speed
        {
            ScriptLog(Severity.Info, "Engaging Cartridge");
            ScriptLog(Severity.Control, "  Moving Vertical Stage Down");
            //Vertical Stage Down ================================================================================================================
            Coordinator.SetMaxSpeed(ScriptName, "VerticalDrive", 30000);
            Coordinator.MoveVertically(ScriptName, "Engage", 0.0);
            CheckStepper(5);

            ScriptLog(Severity.Control, "  Rotating to Connect ");
            //Rotate one direction 4sec ======================================================================================================
            Coordinator.RunConstSpeed(ScriptName, "RotatorMotor", 95);
            System.Threading.Thread.Sleep(4000);
            Coordinator.MotorStop(ScriptName, "RotatorMotor"); // Stop the motor

            Coordinator.MoveVertically(ScriptName, "Engage", 0.0);
            CheckStepper(5);

            ScriptLog(Severity.Control, "  Rebounding Vertical Stage");
            //Vertical Stage Up a Little ================================================================================================================
            Coordinator.MoveVertically(ScriptName, "Backoff", 0.0);
            CheckStepper(5);
        }

        private async void PrimeReagentOne() //done
        {
            fluidicTask = new Task(() => Prime());
            fluidicTask.Start();
            await fluidicTask;
        }

        private void WaitPrime() //done
        {
            fluidicTask.Wait();
        }

        private void Deliver(string source, string output, double vol)  //done
        {
            int volSteps = Convert.ToInt32(vol * 600);
            string enzMix = (output == "Cells") ? "Enzyme" : "NIR";
            if (source != "Manual")
            {
                ScriptLog(Severity.Control, $"Delivering {enzMix} from {source}");
                ScriptLog(Severity.Info, $"Delivering {enzMix} from {source} to Cartridge");
            }
            else
            {
                ScriptLog(Severity.Info, $"Reagent Added Manually. Skipping Automated Delivery.");
            }

            double IR = 0; 

            if (source == "Chiller")
            {
                //Coordinator.MoveToValvePos("Coordinator", "Valve", "Initialize");
                if (ScriptInstanceNumber == 1)
                {
                    //ScriptLog(Severity.Control, $" {ScriptName}");
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "NIR");                 
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;

                    Coordinator.MoveToValvePos("Coordinator", "Valve", "NIR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "NIR"); //
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                   Thread.Sleep(1000);
                }

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve"); //valve
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Aspirate 2mL (1200 steps) =======================================================================================

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);                //600 then was 300
                Coordinator.MoveNoWait(ScriptName, "Pump", volSteps, "");
                isReady = CheckFluidics(15);
                if (!isReady || MachineState == 98 || abortRequested) return;
                Thread.Sleep(5000);


                ScriptLog(Severity.Control, "  Clearing NIR w/ Air");
                if (ScriptInstanceNumber == 2) //used to be 1
                {
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air"); //myScriptName
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000);
                }
                else
                {
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;

                    Coordinator.MoveToValvePos(ScriptName, "Valve", "NIR"); //K&K added
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000); //OG 1000 ms
                }

                //Aspirate 3mL (1800 steps) =======================================================================================

                Coordinator.MoveNoWait(ScriptName, "Pump", volSteps + 1800, ""); // 3000
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                ScriptLog(Severity.Control, "  Dispensing NIR to Disruption Ch");
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                //Move pump valve to Disruptin Ch==================================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                IR = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");

                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                flushCannulas = true;
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                #region Extra Push
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve"); //valve
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //may need to add                
                Coordinator.MoveNoWait(ScriptName, "Pump", 1800, ""); // 3000
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Move pump valve to Disruptin Ch==================================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

            }
            else if (source == "SingleShot")
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Enzyme");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;
                Thread.Sleep(1000); //OG 1000 ms
                
                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return; //MachineState = 98

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                //Aspirate 2mL (1200 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", volSteps, "Enzyme");
                flushSingleShot = true; //added here because the moment we pull from single shot the line needs to be flushed
                isReady = CheckFluidics(15);
                if (!isReady || MachineState == 98 || abortRequested) return;

                ScriptLog(Severity.Control, "  Clearing Enzyme w/ Air");
                if (ScriptInstanceNumber == 2) //used to be 1
                {
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return; //MachineState = 98
                }
                else
                {
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;  //MachineState = 98
                   
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Aspirate Remaining Syringe Volume============================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
                isReady = CheckFluidics(15);
                if (!isReady || MachineState == 98 || abortRequested) return; //MachineState = 98

                ScriptLog(Severity.Control, "  Dispensing Enzyme to Disruption Ch");
                //Move pump valve to Disruption Ch=============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                flushCannulas = true;
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return; //MachineState = 98


                IR = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");
                //Dispense 5mL (3000 steps) ===================================================================================

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                Coordinator.MoveNoWait(ScriptName, "Pump", 0,"");
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                #region Extra Push
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve"); //valve
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //may need to add                
                Coordinator.MoveNoWait(ScriptName, "Pump", 1800, ""); // 3000
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Move pump valve to Disruptin Ch==================================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion
            }

            if (abortRequested) return;

            #region IR Delivery Check
            //ScriptLog(Severity.Info, "Logic Check");

            double IR2 = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");
            ScriptLog(Severity.Control, "Reply" + IR.ToString());
            ScriptLog(Severity.Control, "Reply" + IR2.ToString());
            //ScriptLog(Severity.Info, "Logic Check");


            if (Math.Abs(IR-IR2) < 3)
            {

                ScriptLog(Severity.Info, "Warning: Reagent was not detected after delivery");
                DialogResult decision;
                decision = MessageBox.Show("Reagent was not detected after delivery in Bay" + ScriptInstanceNumber +  ", would you like to abort?" + Environment.NewLine + " " 
                        , "Delivery Failure", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);

                if (decision == DialogResult.No)
                {
                    ScriptLog(Severity.Info, "Warning: User decided to continue with run anyway.");
                }
                else
                {
                    decision = MessageBox.Show("Are you sure you would like to abort?", "Delivery Failure", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);
                    // abort
                    if (decision == DialogResult.No)
                    {
                        ScriptLog(Severity.Info, "Warning: User decided to continue with run anyway.");
                    }
                    else
                    {
                        abortRequested = true;
                        return;
                    }
                }
            }
            #endregion

            flushCannulas = false;
        }

        private void Deliver2(string source, string output, double vol)  //done
        {
            ScriptLog(Severity.Info, "Delivery Vol = " + vol);
            int volSteps = Convert.ToInt32(vol * 600);
            ScriptLog(Severity.Info, "Delivery Vol in steps = " + volSteps);
            int xtraVolSteps = 120;
            if (vol == 0.5)
            {
                xtraVolSteps += 480;
            }
            ScriptLog(Severity.Info, "xtra Vol = " + xtraVolSteps);
            string enzMix = (output == "Cells") ? "Enzyme" : "NIR";
            //ScriptLog(Severity.Control, $"Delivering {enzMix} from {source}");

            if (source != "Manual")
            {
                ScriptLog(Severity.Control, $"Delivering {enzMix} from {source}");
                ScriptLog(Severity.Info, $"Delivering {enzMix} from {source} to Cartridge");
            }
            else
            {
                ScriptLog(Severity.Info, $"Reagent Added Manually. Skipping Automated Delivery.");
            }

            double IR = 0;
            double IR2 = 0;
            DateTime IRtime = DateTime.UtcNow;
            DateTime IR2time = DateTime.UtcNow;

            if (source == "Chiller")
            {
                #region Align Valves to NIR
                if (ScriptInstanceNumber == 2)
                {
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "NIR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "NIR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "NIR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                #region Set Speed and Pull

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);


                ScriptLog(Severity.Info, "Right before pull, xtra Vol = " + xtraVolSteps);
                //Aspirate 2mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", volSteps + xtraVolSteps, ""); //was 300
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                Thread.Sleep(5000);

                #region Align Valves to Air

                if (ScriptInstanceNumber == 2)
                {
                    //move valve to NSR Position (Bay 2 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    //move valve to NSR Position (Bay 1 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                #endregion

                #region Set Speed and Pull
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                //Aspirate 2mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                ScriptLog(Severity.Info, "Right before push to waste, vol to waste = " + (xtraVolSteps/2));
                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", (3000 - (xtraVolSteps/2)), ""); // 2850
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                ScriptLog(Severity.Info, "After push to waste, step pos = " + (3000 - (xtraVolSteps / 2)));

                if (vol == 0.5)
                {
                    ScriptLog(Severity.Info, "Sleeping for 5s, venting any built up pressure then sleeping for 5s");
                    Thread.Sleep(5000);
                    //move valve to NSR Position (Bay 2 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(5000); //OG 1000 ms
                }

                IR = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");
                IRtime = DateTime.UtcNow;

                #region Align and Push to Disrupt
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", (3000 - (volSteps+(xtraVolSteps/2))), ""); //was 2850
                flushCannulas = true;
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                if (vol == 0.5)
                {
                    Thread.Sleep(5000);
                }

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align Valves to Air

                if (ScriptInstanceNumber == 2)
                {
                    //move valve to NSR Position (Bay 2 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    //move valve to NSR Position (Bay 1 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                #endregion


                #region Set Speed and Pull
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);
                Coordinator.MoveNoWait(ScriptName, "Pump", 2400, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 2000, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                #region Align and Push to Disrupt
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                Coordinator.MoveNoWait(ScriptName, "Pump", 500, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 1000);

                IR2 = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");
                IR2time = DateTime.UtcNow;

                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


            }
            else if (source == "SingleShot")
            {
                #region Align Valves to Enzyme

                Coordinator.MoveToValvePos(ScriptName, "Valve", "Enzyme");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                #endregion

                #region Set Speed and Pull
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);

                //Aspirate 2mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
                flushSingleShot = true;
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                #region Align and Push Back Up
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 2700, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                IR = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");
                IRtime = DateTime.UtcNow;

                #region Align and Push to Disrupt
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.MoveNoWait(ScriptName, "Pump", (2700 - volSteps), ""); //was 1500
                flushCannulas = true;
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                #region Align and Push Back up
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align Valves to Air

                if (ScriptInstanceNumber == 2)
                {
                    //move valve to NSR Position (Bay 2 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    //move valve to NSR Position (Bay 1 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                #endregion


                #region Set Speed and Pull
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                //Aspirate 2mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 2400, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 2000, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                #region Align and Push to Disrupt
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.MoveNoWait(ScriptName, "Pump", 500, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 1000);

                IR2 = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");
                IR2time = DateTime.UtcNow;

                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion
            }

            ScriptLog(Severity.Control, "Reply" + IR.ToString() + "@" + IRtime);
            ScriptLog(Severity.Control, "Reply" + IR2.ToString() + "@" + IR2time);

            //if ((Math.Abs(IR - IR2) < 4) && vol == 2 && waitedfortemp == true)
            //{

            //    DialogResult decision;
            //    CustomMssgBox.CustomMssgBox msgBox = new CustomMssgBox.CustomMssgBox();
            //    if (ScriptName == "BayScript1")
            //    {
            //        decision = msgBox.Show("Reagent was not detected after delivery, would you like to abort?" + Environment.NewLine + " "
            //                , "Bay 1 Delivery Failure", MessageBoxButtons.YesNo);
            //    }
            //    else
            //    {
            //        decision = msgBox.Show("Reagent was not detected after delivery, would you like to abort?" + Environment.NewLine + " "
            //            , "Bay 2 Delivery Failure", MessageBoxButtons.YesNo);
            //    }

            //    if (decision == DialogResult.Cancel)
            //    {
            //        // continue
            //    }
            //    else
            //    {
            //        // abort
            //        abortRequested = true;
            //        return;
            //    }
            //}

            flushCannulas = false;
        }

        private void Incubate(double disruptVol, int incTime, string incType, short speed) //done
        {
            DateTime startTime = DateTime.UtcNow;
            incStarted = true;
            incFinished = false;
            int i = 0;
            double IR;
            double Block;
            bool phase3 = false;
            ScriptLog(Severity.Info, "Incubating Sample");
            ScriptLog(Severity.Control, "Incubating Sample..." + DateTime.UtcNow);
            ScriptLog(Severity.Control, $"Incubation Style {incType}...");
            if (incType == "Immersive")
            {
                //ScriptLog(Severity.Info, "got into immersive...");
                Coordinator.RunConstSpeed(ScriptName, "RotatorMotor", speed);
                //for length of incubation, move up and down
                while ((DateTime.UtcNow - startTime < TimeSpan.FromMinutes(incTime)) && !abortRequested)
                {

                    Block = Coordinator.GetTemperatureReading(ScriptName, "ThermalBlockSensor");
                    IR = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");

                    ScriptLog(Severity.Control, "IR sensor " + IR);
                    ScriptLog(Severity.Control, "Block Temperature " + Block);

                    if ((IR > 36.5 && phase3 == false) || (DateTime.UtcNow - startTime) > TimeSpan.FromMinutes(7) && phase3 == false)
                    {
                        ScriptLog(Severity.Control, "Phase3");
                        Coordinator.GoToTemperature(ScriptName, "Phase3");
                        phase3 = true;
                    }
                    Coordinator.MoveVerticallyMulti(ScriptName, "Immersive", disruptVol);
                    Thread.Sleep(250);
                }
                //stop rotation
                Coordinator.MotorStop(ScriptName, "RotatorMotor");
                ScriptLog(Severity.Control, "Done");

            }
            else if (incType == "Top") //OG value was 'Top'
            {
                //move to top position
                Coordinator.MoveVertically(ScriptName, "Mix_Top", disruptVol);
                //start rotating dc motor
                Coordinator.RunConstSpeed(ScriptName, "RotatorMotor", speed);

                while (DateTime.UtcNow - startTime < TimeSpan.FromMinutes(incTime) && !abortRequested)
                {

                    Block = Coordinator.GetTemperatureReading(ScriptName, "ThermalBlockSensor");
                    IR = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");

                    ScriptLog(Severity.Control, "IR sensor " + IR);
                    ScriptLog(Severity.Control, "Block Temperature " + Block);

                    if ((IR > 36.5 && phase3 == false) || (DateTime.UtcNow - startTime) > TimeSpan.FromMinutes(7) && phase3 == false)
                    {
                        ScriptLog(Severity.Control, "Phase3");
                        Coordinator.GoToTemperature(ScriptName, "Phase3");
                        phase3 = true;
                    }

                    Thread.Sleep(1000);
                }
                //stop rotating dc motor
                Coordinator.MotorStop(ScriptName, "RotatorMotor");
            }
            else if (incType == "Triturate") //OG value was 'Triturate'
            {
                while ((DateTime.UtcNow - startTime < TimeSpan.FromMinutes(incTime)) && !abortRequested)
                {
                    //do nothing for 30sec
                    Thread.Sleep(30000);
                    //move up and down 10 times with quarter second turn in between
                    //ScriptLog(Severity.Info, "Done Waiting");
                    for (int j = 0; j < 10; j++)
                    {
                        Block = Coordinator.GetTemperatureReading(ScriptName, "ThermalBlockSensor");
                        IR = Coordinator.GetTemperatureReading(ScriptName, "IRSensor");

                        ScriptLog(Severity.Control, "IR sensor " + IR);
                        ScriptLog(Severity.Control, "Block Temperature " + Block);

                        if ((IR > 36.5 && phase3 == false) || (DateTime.UtcNow - startTime) > TimeSpan.FromMinutes(7) && phase3 == false)
                        {
                            ScriptLog(Severity.Control, "Phase3");
                            Coordinator.GoToTemperature(ScriptName, "Phase3");
                            phase3 = true;
                        }
                        Coordinator.MoveVerticallyAndSpinMulti(ScriptName, "Mix_Trit", disruptVol, 1350);
                    }
                }
            }
            else
            {
                //do nothing for 1sec entire time
                while ((DateTime.UtcNow - startTime < TimeSpan.FromMinutes(incTime)) && !abortRequested)
                {
                    Thread.Sleep(1000);
                }
            }
        }

        private void Disrupt(string output, string tissueType, string disruptType, double speed) //done
        {
            if (disruptType != "None")
            {
                short disruptRPM = Convert.ToInt16(speed);

                ScriptLog(Severity.Info, "Disrupting Sample");
                if (disruptType == "Cell_Default" || disruptType == "Nuclei_Default")
                {

                    ScriptLog(Severity.Control, "Disrupting Sample..." + DateTime.Now);
                    if (output == "Cells")
                    {
                        if (tissueType == "Lung")
                        {
                            ScriptLog(Severity.Info, "  Performing Lung Specific Disruption");
                            Coordinator.MoveVerticallyAndSpinMulti(ScriptName, "Lung_Cell_Disrupt", disruptVol, disruptRPM);
                        }
                        else
                        {
                            ScriptLog(Severity.Info, "  Performing Default Cell Disruption");
                            Coordinator.MoveVerticallyAndSpinMulti(ScriptName, "Default_Cell_Disrupt", disruptVol, disruptRPM);
                        }
                    }
                    else if (output == "Nuclei") //KC: is this redundant?
                    {
                        //nuclei specific stepwise disruption
                        ScriptLog(Severity.Info, "  Performing Default Nuclei Disruption");
                        Coordinator.MoveVerticallyAndSpinMulti(ScriptName, "Default_Nuclei_Disrupt", disruptVol, disruptRPM);
                    }
                }

                else if (disruptType == "Cell_Triturate")
                {
                    ScriptLog(Severity.Info, "  Performing Trituration");
                    ScriptLog(Severity.Control, "Disrupting Sample..." + DateTime.Now);
                    //cell triturate routine
                    for (int i = 0; i < 10; i++)
                    {
                        Coordinator.MoveVerticallyAndSpinMulti(ScriptName, "Cell_Trit", disruptVol, disruptRPM);
                    }
                }

                else if (disruptType == "Nuclei_Dounce")
                {
                    ScriptLog(Severity.Info, "  Performing Douncing");
                    ScriptLog(Severity.Control, "Disrupting Sample..." + DateTime.Now);
                    //nuclei dounce routine
                    for (int i = 0; i < 10; i++)
                    {
                        Coordinator.MoveVerticallyAndSpinMulti(ScriptName, "Nuclei_Dounce", disruptVol, Convert.ToInt16(disruptionSpeed));
                    }
                }
            }
            else //none
            {
                ScriptLog(Severity.Info, "Skipping Sample Disruption");
                Thread.Sleep(1000);
            }
        }

        private void Strain() //done
        {
            ScriptLog(Severity.Info, "Filtering Sample ");
            Coordinator.MoveVertically(ScriptName, "Bottom_Out", 2.0);

            ScriptLog(Severity.Control, "  Pulling from Trap Ch ");
            //Move Pump Valve to Stand-Alone Valve ==============================================================================================
            Coordinator.MoveToValvePos(ScriptName, "Pump", "trapCh");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98 || abortRequested) return; //MachineState = 98

            //Aspirate 4mL (3000 steps) =========================================================================================================
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
            isReady = CheckFluidics(60);
            if (!isReady || MachineState == 98 || abortRequested) return; //MachineState = 98

            ScriptLog(Severity.Control, "  Pushing to Waste");
            //Move pump valve to Waste ===========================================================================================================
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98 || abortRequested) return; //MachineState = 98

            //Dispense 5mL (3000 steps) ==========================================================================================================
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 1000);
            Coordinator.MoveNoWait(ScriptName, "Pump", 0,"");
            isReady = CheckFluidics(60);
            if (!isReady || MachineState == 98 || abortRequested) return; //MachineState = 98
        } 

        private async void PrimeReagentTwo() //done
        {
            fluidicTask = new Task(() => Prime2());
            fluidicTask.Start();
            await fluidicTask;
        }

        //09-28-22 NOTE: We changed this to adjust Wash 2 vs Wash 1 from SingleShot
        private void Wash(string source, string output, double vol) //done 
        {
            #region Reagent Part

            int volSteps = Convert.ToInt32(vol * 600);
            string buffer = (output == "Cells") ? "Buffer" : "NSR";

            ScriptLog(Severity.Info, $"Delivering {buffer} from {source}");

            if (source == "Chiller")
            {
                if (ScriptInstanceNumber == 2) 
                {
                    //move valve to NSR Position (Bay 2 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "NSR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    //Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    //move valve to NSR Position (Bay 1 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "NSR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "NSR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                //Aspirate 2mL (1200 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", volSteps,"");
                isReady = CheckFluidics(15);
                if (!isReady || MachineState == 98 || abortRequested) return;

                ScriptLog(Severity.Control, "  Clearing NSR w/ Air");
                if (ScriptInstanceNumber == 2) //used to be 1
                {
                    //Move valve to vent (Bay 2 Specific)=========================================================================
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }
                else
                {
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    //Move valve to vent (Bay 1 Specific)=========================================================================
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air"); //I2, no need for coordinator 
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Aspirate another 3mL (1800 steps) ==============================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", volSteps + 1800,"");
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                ScriptLog(Severity.Control, "  Dispensing NSR to Disruption Ch");
                //Move pump valve to Disruptin Ch==================================================================================

                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Dispense 5mL (3000 steps) =======================================================================================
                //Coordinator.SetPumpSpeed(myScriptName, "Pump", "Delivery");
                //Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);
                Coordinator.MoveNoWait(ScriptName, "Pump", 0,"");
                flushCannulas = true;
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Coordinator.SetPumpPower(ScriptName, "Pump", "Default");

                #region Extra Push
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve"); //valve
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //may need to add                
                Coordinator.MoveNoWait(ScriptName, "Pump", 1800, ""); // 3000
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Move pump valve to Disruptin Ch==================================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion
            }
            else if (source == "SingleShot")
            {
                //need to factor in the extra steps from the DeviceData file into the pull amount

                //move valve to SS2 Position
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Buffer");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;
                //Thread.Sleep(1000); //OG 1000 ms

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                //Aspirate 2mL (1200 steps) =======================================================================================
                if (!firstWashComplete)
                {
                    Coordinator.MoveNoWait(ScriptName, "Pump", volSteps + 100, "Buffer");
                    flushSingleShot = true;
                    isReady = CheckFluidics(15);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }
                else
                {
                    Coordinator.MoveNoWait(ScriptName, "Pump", volSteps - 400, "Buffer");
                    isReady = CheckFluidics(15);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                ScriptLog(Severity.Control, "  Clearing Buffer w/ Air");
                if (ScriptInstanceNumber == 2) //used to be 1
                {
                    //Move valve to vent (Bay 2 Specific)=========================================================================
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }
                else
                {
                    //Move valve to vent (Bay 1 Specific)======================================================================
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000);
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Aspirate Remaining Syringe Volume============================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                ScriptLog(Severity.Control, "  Dispensing Buffer to Disruption Ch");
                //Move pump valve to Disruption Ch=============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Dispense 5mL (3000 steps) =======================================================================================
                //Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);
                //Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                flushCannulas = true;
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Coordinator.SetPumpPower(ScriptName, "Pump", "Default");

                //Coordinator.SetPumpSpeed(myScriptName, "Pump", "Default");
                //Coordinator.SetPumpPower(myScriptName, "Pump", "Default");

                #region Extra Push
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve"); //valve
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //may need to add                
                Coordinator.MoveNoWait(ScriptName, "Pump", 1800, ""); // 3000
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Move pump valve to Disruptin Ch==================================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion
            }
            flushCannulas = false;
            #endregion

            #region Mechanical Part
            ScriptLog(Severity.Info, "Cleaning Disrupter Head");

            Coordinator.MoveVerticallyAndSpinMulti(ScriptName, "Wash", 2.0, 135);

            #region Not Using
            ////Rotate one direction 4sec ======================================================================================================
            ////short duty = 5574;
            ////uint accel = 500000;
            ////Coordinator.SetMotorDutyAccel(myScriptName, "RotatorMotor", duty, accel);

            ////Coordinator.RunConstSpeed(myScriptName, "RotatorMotor", 1900);
            ////for (int x = 0; x < 4; x++)
            ////{
            ////    ScriptLog(Severity.Info, "  Moving Vertical Stage Up");
            ////    //Vertical Stage Down ================================================================================================================
            ////    Coordinator.SetMaxSpeed(myScriptName, "VerticalDrive", 30000);
            ////    Coordinator.MoveToRelPosition(myScriptName, "VerticalDrive", -5000);
            ////    Thread.Sleep(1000); //give it time to move without blocking
            ////    Coordinator.AwaitMoveDone(myScriptName, "VerticalDrive", 6000);

            ////    ScriptLog(Severity.Info, "  Moving Vertical Stage Down");
            ////    //Vertical Stage Up a Little ================================================================================================================
            ////    Coordinator.SetMaxSpeed(myScriptName, "VerticalDrive", 30000);
            ////    Coordinator.MoveToRelPosition(myScriptName, "VerticalDrive", 5000);
            ////    Thread.Sleep(1000); //give it time to move without blocking
            ////    Coordinator.AwaitMoveDone(myScriptName, "VerticalDrive", 6000);
            ////}
            ////Coordinator.MotorStop(myScriptName, "RotatorMotor"); // Stop the motor
            #endregion

            #endregion
        }

        private void WashLast(string source, string output, double vol) //looks like we aren't using this either
        {
            #region Reagent Part

            int volSteps = Convert.ToInt32(vol * 600);
            string buffer = (output == "Cells") ? "Buffer" : "NSR";
            ScriptLog(Severity.Info, $"Delivering {buffer} from {source}");


            if (source == "Chiller" || source == "Manual")
            {

                #region Align Valves to NSR
                if (ScriptInstanceNumber == 2)
                {
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "NSR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "NSR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "NSR");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Set Speed and Pull
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);

                //Aspirate 2mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 1320, ""); // 1500
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                Thread.Sleep(5000);

                #region Align Valves to Air

                if (ScriptInstanceNumber == 2)
                {
                    //move valve to NSR Position (Bay 2 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    //move valve to NSR Position (Bay 1 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                #endregion


                #region Set Speed and Pull
                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                //Aspirate 2mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 2940, ""); // 2850
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align and Push to Disrupt
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 1740, ""); // 1650
                flushCannulas = true;
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align Valves to Water 

                if (ScriptInstanceNumber == 2) //used to be 1
                {
                    ScriptLog(Severity.Control, "   Moving to Water");
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98) return; //MachineState = 98

                }
                else
                {
                    ScriptLog(Severity.Control, "   Moving to Water");
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Water");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98) return;

                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");  // 2nd
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98) return; //MachineState = 98

                }

                //Move SP to 2
                ScriptLog(Severity.Control, "   Moving to SP I2");
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return;

                #endregion


                #region Set Speed and Pull
                //Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);

                //Aspirate 2mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 600, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align Valves to Air

                if (ScriptInstanceNumber == 2)
                {
                    //move valve to NSR Position (Bay 2 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    //move valve to NSR Position (Bay 1 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                #endregion


                #region Set Speed and Pull
                //Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);

                //Aspirate 2mL (3000 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 2800, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.MoveNoWait(ScriptName, "Pump", 2000, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                #region Align and Push to Disrupt
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.MoveNoWait(ScriptName, "Pump", 500, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                flushCannulas = false;
                #endregion

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 1000);

                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion

            }
            else if (source == "SingleShot")
            {

                if (firstWashComplete == true)
                {

                    #region Align Valves to Buffer

                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Buffer");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;

                    //Move Pump Valve to Stand-Alone Valve ============================================================================
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;

                    #endregion


                    #region Set Speed and Pull
                    Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);

                    //Aspirate 2mL (3000 steps) =======================================================================================
                    Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion


                    #region Align and Push Back up
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.MoveNoWait(ScriptName, "Pump", 2700, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion


                    #region Align and Push to Disrupt
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.MoveNoWait(ScriptName, "Pump", 1500, "");
                    flushCannulas = true;
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion

                    Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                    #region Align and Push Back up
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion


                    #region Align Valves to Water 

                    if (ScriptInstanceNumber == 2) //used to be 1
                    {
                        ScriptLog(Severity.Control, "   Moving to Water");
                        Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                        isReady = CheckFluidics(3);
                        if (!isReady || MachineState == 98) return; //MachineState = 98

                    }
                    else
                    {
                        ScriptLog(Severity.Control, "   Moving to Water");
                        Coordinator.MoveToValvePos("Coordinator", "Valve", "Water");
                        isReady = CheckFluidics(3);
                        if (!isReady || MachineState == 98) return;

                        Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");  // 2nd
                        isReady = CheckFluidics(3);
                        if (!isReady || MachineState == 98) return; //MachineState = 98

                    }

                    //Move SP to 2
                    ScriptLog(Severity.Control, "   Moving to SP I2");
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98) return;

                    #endregion


                    #region Set Speed and Pull
                    //Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);

                    //Aspirate 2mL (3000 steps) =======================================================================================
                    Coordinator.MoveNoWait(ScriptName, "Pump", 600, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion


                    #region Align Valves to Air

                    if (ScriptInstanceNumber == 2)
                    {
                        //move valve to NSR Position (Bay 2 Specific)
                        Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                        isReady = CheckFluidics(3);
                        if (!isReady || MachineState == 98 || abortRequested) return;
                        Thread.Sleep(1000); //OG 1000 ms
                    }
                    else
                    {
                        //move valve to NSR Position (Bay 1 Specific)
                        Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                        isReady = CheckFluidics(3);
                        if (!isReady || MachineState == 98 || abortRequested) return;
                        Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                        isReady = CheckFluidics(3);
                        if (!isReady || MachineState == 98 || abortRequested) return;
                    }

                    //Move Pump Valve to Stand-Alone Valve ============================================================================
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;

                    #endregion


                    #region Set Speed and Pull
                    //Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);

                    //Aspirate 2mL (3000 steps) =======================================================================================
                    Coordinator.MoveNoWait(ScriptName, "Pump", 2800, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion


                    #region Align and Push to Waste
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                    Coordinator.MoveNoWait(ScriptName, "Pump", 2000, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion

                    Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                    #region Align and Push to Disrupt
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                    Coordinator.MoveNoWait(ScriptName, "Pump", 500, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    flushCannulas = false;
                    #endregion

                    Coordinator.SetPumpSpeed(ScriptName, "Pump", 1000);

                    #region Align and Push to Waste
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                    Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion

                }
                else
                {

                    #region Align Valves to Buffer

                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Buffer");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;

                    //Move Pump Valve to Stand-Alone Valve ============================================================================
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;

                    #endregion


                    #region Set Speed and Pull
                    Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);

                    //Aspirate 2mL (3000 steps) =======================================================================================
                    Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion


                    #region Align and Push Back up
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.MoveNoWait(ScriptName, "Pump", 2700, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion


                    #region Align and Push to Disrupt
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                    Coordinator.MoveNoWait(ScriptName, "Pump", 1500, "");
                    flushCannulas = true;
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion

                    Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                    #region Align and Push Back up
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                    Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion


                    #region Align Valves to Air

                    if (ScriptInstanceNumber == 2)
                    {
                        //move valve to NSR Position (Bay 2 Specific)
                        Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                        isReady = CheckFluidics(3);
                        if (!isReady || MachineState == 98 || abortRequested) return;
                        Thread.Sleep(1000); //OG 1000 ms
                    }
                    else
                    {
                        //move valve to NSR Position (Bay 1 Specific)
                        Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                        isReady = CheckFluidics(3);
                        if (!isReady || MachineState == 98 || abortRequested) return;
                        Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                        isReady = CheckFluidics(3);
                        if (!isReady || MachineState == 98 || abortRequested) return;
                    }

                    //Move Pump Valve to Stand-Alone Valve ============================================================================
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;

                    #endregion


                    #region Set Speed and Pull
                    //Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);

                    //Aspirate 2mL (3000 steps) =======================================================================================
                    Coordinator.MoveNoWait(ScriptName, "Pump", 2400, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion


                    #region Align and Push to Waste
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                    Coordinator.MoveNoWait(ScriptName, "Pump", 2000, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion

                    Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);

                    #region Align and Push to Disrupt
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                    Coordinator.MoveNoWait(ScriptName, "Pump", 500, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    flushCannulas = true;
                    #endregion

                    Coordinator.SetPumpSpeed(ScriptName, "Pump", 1000);

                    #region Align and Push to Waste
                    Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;


                    //Dispense 5mL (3000 steps) =======================================================================================
                    Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                    Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                    isReady = CheckFluidics(150);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    #endregion
                }
            }

            #endregion

            #region Mechanical Part
            ScriptLog(Severity.Info, "Cleaning Disrupter Head");
            Coordinator.MoveVerticallyAndSpinMulti(ScriptName, "Wash", 2.0, 135);
            #endregion

        }

        private void EndRun(string sourceOne, string sourceTwo, string runTemp) //not using this
        {
            //stop DC motor
            Coordinator.MotorStop(ScriptName, "RotatorMotor"); // Stop the motor

            //disengage stepper motor
            Coordinator.SetMaxSpeed(ScriptName, "VerticalDrive", 30000);
            Coordinator.MoveToAbsPosition(ScriptName, "VerticalDrive", 0);

            //PumpSpd
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

            //clear fluidics
            if (sourceOne == "SingleShot" || sourceTwo == "SingleShot")
            {
                ScriptLog(Severity.Control, "Cleaning out Single Shot Fluidic Lines");
                BlowEnzBuffer();
                RinseEnzBuff();
                BlowEnzBuffer();
                BlowEnzBuffer();
                RinseEnzBuff();
                BlowEnzBuffer();
                BlowEnzBuffer();
            }
            else
            {
                ScriptLog(Severity.Control, "Cleaning out Common Fluidic Lines");
                //need to add something to just pull water and air in and send to waste to clear out some of the lines
            }

            ScriptLog(Severity.Info, "Turning off Temp Control");
            if (runTemp != "Cool")
            {
                Coordinator.StopControlling(ScriptName, "CartridgeTempControllerMAS");
                MachineState = 0;
            }
            else
            {
                //If we are cooling we can just leave the block the way it is when we enter the cooling machine state
                MachineState = 2;
            }
            Coordinator.AwaitMoveDone(ScriptName, "VerticalDrive", 6000);
        }

        private void EndRun2(string sourceOne, string sourceTwo, string runTemp)
        {

            ScriptLog(Severity.Info, "Ending Run ");

            //stop DC motor
            ScriptLog(Severity.Control, "Making Rotational Motor Safe");
            ScriptLog(Severity.Info, "  Making Rotational Motor Safe");
            Coordinator.MotorStop(ScriptName, "RotatorMotor"); // Stop the motor

            //disengage stepper motor
            ScriptLog(Severity.Control, "Disengaging Vertical Stage");
            ScriptLog(Severity.Info, "  Disengaging Vertical Stage");
            Coordinator.SetMaxSpeed(ScriptName, "VerticalDrive", 30000);
            Coordinator.MoveToAbsPosition(ScriptName, "VerticalDrive", 0);

            //PumpSpd
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

            //clear fluidics
            if (sourceOne == "SingleShot" || sourceTwo == "SingleShot")
            {
                ScriptLog(Severity.Control, "Cleaning out Single Shot Fluidic Lines");
                ScriptLog(Severity.Info, "  Cleaning out Single Shot Fluidic Lines");

                PrimeSyringe();
                //RinseEnzBuff();
                //RinseEnzBuff();
                FullSyringeRinse("Enzyme");
                FullSyringeRinse("Buffer");
                BlowEnzBuffer();
                BlowEnzBuffer();
            }
            else
            {
                ScriptLog(Severity.Control, "Cleaning out Common Fluidic Lines");
                ScriptLog(Severity.Info, "  Cleaning out Common Fluidic Lines");
                //need to add something to just pull water and air in and send to waste to clear out some of the lines
            }

            if (cannClean)
            {
                ScriptLog(Severity.Control, "Cleaning out Cartridge Fluidic Lines");
                ScriptLog(Severity.Info, "  Cleaning out Cartridge Fluidic Lines");
                int volSteps = cannCleanSteps;

                if (ScriptInstanceNumber == 2)
                {
                    //move valve to NSR Position (Bay 2 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    //Thread.Sleep(1000); //OG 1000 ms
                }
                else
                {
                    //move valve to NSR Position (Bay 1 Specific)
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Water");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);

                //Aspirate xmL (x * 600 steps) =======================================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", volSteps, "");
                isReady = CheckFluidics(15);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //ScriptLog(Severity.Info, "  Clearing NSR w/ Air");
                if (ScriptInstanceNumber == 2) //used to be 1
                {
                    //Move valve to vent (Bay 2 Specific)=========================================================================
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }
                else
                {
                    Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                    //Move valve to vent (Bay 1 Specific)=========================================================================
                    Coordinator.MoveToValvePos(ScriptName, "Valve", "Air"); //I2, no need for coordinator 
                    isReady = CheckFluidics(3);
                    if (!isReady || MachineState == 98 || abortRequested) return;
                }

                //Aspirate another 3mL (1800 steps) ==============================================================================
                Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
                isReady = CheckFluidics(30);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //ScriptLog(Severity.Info, "  Dispensing NSR to Disruption Ch");
                //Move pump valve to Disruptin Ch==================================================================================

                //Coordinator.SetPumpSpeed(ScriptName, "Pump", 200);


                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.MoveNoWait(ScriptName, "Pump", 2700, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align and Push to Disrupt
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.MoveNoWait(ScriptName, "Pump", 1900, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                #region Align and Push to Waste
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;


                //Dispense 5mL (3000 steps) =======================================================================================
                Coordinator.SetPumpPower(ScriptName, "Pump", "Delivery");
                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;
                #endregion


                //Move Pump Valve to Stand-Alone Valve ============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                Coordinator.MoveNoWait(ScriptName, "Pump", 1800, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;

                //Move pump valve to Disruption Ch=============================================================================
                Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98 || abortRequested) return;

                Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
                isReady = CheckFluidics(150);
                if (!isReady || MachineState == 98 || abortRequested) return;

            }

            //deal with temp and next machine state
            if (runTemp != "Cool")
            {
                ScriptLog(Severity.Info, "  Turning off Temp Control");
                Coordinator.StopControlling(ScriptName, "CartridgeTempControllerMAS");
            }
            else
            {
                //If we are cooling we can just leave the block the way it is when we enter the cooling machine state
            }
            CheckStepper(20);
        }

        private void ControlTemp(string runTemp) //done until I have an instrument to test temp params on
        {
            if (runTemp == "4C")
            {
                //set TEC to 2degC
                Coordinator.GoToTemperature(ScriptName, "CartridgeTempControllerMAS", 2);
            }
            else if (runTemp == "37C")
            {
                //set TEC to 37degC
                Coordinator.GoToTemperature(ScriptName, "CartridgeTempControllerMAS", 37);
            }
            else
            {
                //do nothing? or control to 20degC?
                //I choose do nothing for the time being
            }
        }

        private void PreDisrupt() //done but need to figure out dc motor speed
        {
            ScriptLog(Severity.Info, "Pre-disrupting Sample " );
            Coordinator.MoveVerticallyAndSpinMulti(ScriptName, "PreDisrupt", disruptVol, Convert.ToInt16(disruptionSpeed));
        }

        private void PerformAbort()
        {
            //MachineState = 5;
            ScriptLog(Severity.Info, "Performing Abort");
            ScriptLog(Severity.Control, "Expected: " + CalcAbortTime());
            //AbortCleanup();

            ScriptLog(Severity.Info, "Performing Abort Cleanup");
            //myInstrument.WaitTempAsync(); ====>> Un// when Kaiwan implements Async functions 
            abortRequested = false;
            Abort();
            ResetFlags();
            ScriptLog(Severity.Info, "Successfully Aborted");

            //ScriptLog(Severity.Info, "Cleanup was run");

            LogStateChange(5, 0);
            MachineState = 0; //go to idle state
        }

        public int CalcAbortTime()
        {
            int totAbortTime = 90;

            return totAbortTime;
        }

        public void Abort()
        {
            //localAbort = false; //turns all functions back on
            if (!aborted)
            {
                //string runType = runOutput;
                //#region Make Temp Safe Part I
                //ScriptLog(Severity.Info, "   Making Temperature Safe...");
                ////Option 1: Control temperature to 20C then turn off temp control
                //tempBlock.ControlTemperature(20);
                //#endregion

                aborting = true;

                #region Make Fluidics Safe
                ScriptLog(Severity.Info, "  Making Fluidics Safe");
                ScriptLog(Severity.Control, "     Delivery Started?" + deliveryStarted);
                ScriptLog(Severity.Control, "     Delivery Finished?" + deliveryFinished);
                ScriptLog(Severity.Control, "     Enzyme Loaded?" + enzymeLoaded);
                //fluidics.Initialize(2);
                ScriptLog(Severity.Control, "Initializing necessary valves and pump...");
                Coordinator.InitPump(ScriptName, "Valve");
                Coordinator.InitPump(ScriptName, "Pump");
                //if (deliveryStarted && !deliveryFinished && !cannulaProb)
                //{
                //make sure cartridge is inserted

                ScriptLog(Severity.Info, "    Pushing Leftover Solution to Waste");
                for (int i = 0; i < 2; i++)
                {
                    PushToWaste();
                }

                ScriptLog(Severity.Info, "    Clearing Cannulas...");
                BlowCannulas();


                //}
                //if ((runType == "Cells" || rSource == "SingleShot") && enzymeLoaded)
                //{
                ScriptLog(Severity.Info, "    Cleaning Single Shot...");
                //fluidics.CleanupCellRun();
                CellCleanUp();
                //}
                //else
                //{
                //    ScriptLog(Severity.Info, "     Cleaning Internals...");
                //    //fluidics.Cleanup();

                //}
                ScriptLog(Severity.Info, "    Pushing Final Remaining Water to Waste");
                PushToWaste();
                #endregion

                #region Make Rotation Safe
                ScriptLog(Severity.Info, "  Making Rotator Safe...");
                //rotator.MotorStop();
                Coordinator.MotorStop(ScriptName, "RotatorMotor");
                //rotator.Cleanup();
                #endregion

                #region Make Temp Safe Part II
                ////ScriptLog(Severity.Info, "   Checking Temperature...");
                ////ScriptLog(Severity.Info, "     Temp = " + tempBlock.GetTemperature());
                ////while (tempBlock.GetTemperature() > 55.0 || tempBlock.GetTemperature() < 4.0)
                ////{
                ////    Thread.Sleep(1000);
                ////    ScriptLog(Severity.Info, "     Temp = " + tempBlock.GetTemperature());
                ////}
                //WaitTempAsync();
                //tempBlock.Stop();
                Coordinator.StopControlling(ScriptName, "CartridgeTempControllerMAS");
                ScriptLog(Severity.Control, "stops within make temp safe p2");
                ////tempBlock.Cleanup();
                #endregion

                #region Make Vertical Safe
                ScriptLog(Severity.Info, "  Making Z-Axis Safe...");
                //verticalStage.Initialize();
                Coordinator.MoveToAbsPosition(ScriptName, "VerticalDrive", 0);
                //verticalStage.Cleanup();
                #endregion

                if (cannulaProb)
                {
                    //ask user to insert cleaning cartridge
                    DialogResult cannulaResponse = DialogResult.Cancel;
                    while (cannulaResponse != DialogResult.OK)
                    {
                        //cannulaResponse = myParentScript.cusMsgBox2.Show("Insert decontamination cartridge then press OK.", "Cleaning Fluidics", MessageBoxButtons.OKCancel);
                        //Add this ^^^^^
                        cannulaResponse = MessageBox.Show("Insert decontamination cartridge then press OK.", "Cleaning Fluidics", MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                    }
                    //fluidics.RinseCannulas();
                    //fluidics.BlowCannulas();
                    CannulaCleanUp();
                }

                aborted = true;
            }
        }

        #endregion
        /*----------------------------------------------------------------------------------------*/

        /*----------------------------------------------------------------------------------------*/
        #region Sub-Routines

        #region Variables
        int stepNum = 0;
        public DateTime startTime;
        public DateTime endTime;
        DateTime tempStartTime;
        double duration;
        double diff;
        double diffMs;
        //short engageRPM = 95;
        short preDisruptionRPM = 75;
        int engageStep = 185000;
        bool constantVelocity = true;
        int expectedTime;
        public bool atTemp = false;
        public bool instrumentPresent = true;
        public bool comsFine = true;
        public string comError = "";
        public int comCounter;
        public string comErrorShort = "";
        public int startTime1;
        #endregion

        //09-28-22 NOTE: This should only prime the Chiller, we don't prime the SingleShot anymore
        private void Prime() //need to link device data variables
        {
            ScriptLog(Severity.Info, $"Priming NIR from Chiller");
            bool isReady = false;
            ////Move valve to NIR pos ===========================================================================================================

            Coordinator.SetPumpSpeed(ScriptName, "Pump", 300); 

            ScriptLog(Severity.Control, $"  Priming Up NIR");
            if (ScriptInstanceNumber == 1 && r1Source == "Chiller") //used to be 1 and NIR
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "NIR"); 
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

                Coordinator.MoveToValvePos("Coordinator", "Valve", "NIR");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                //Thread.Sleep(5000);
            }
            else 
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", $"NIR"); //$"{ enzMix}
                isReady = CheckFluidics(3);
                if (!isReady) return; //MachineState = 98
                //Thread.Sleep(1000);
            }

            //Move Pump Valve to Stand-Alone Valve ===========================================================================================================
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Aspirate 1mL (600 steps) =================================================================================================================
            Coordinator.MoveNoWait(ScriptName, "Pump", 480); // 700
            isReady = CheckFluidics(15);
            if (!isReady || MachineState == 98) return; //MachineState = 98
            Thread.Sleep(1000); // used to be 1, residual flow 


            ScriptLog(Severity.Control, $"  Clearing NIR With Air");
            if (ScriptInstanceNumber == 1) //used to be 1
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air"); // changed to 2
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

                Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                Thread.Sleep(1000);

            }
            else 
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air"); //K&K added
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                Thread.Sleep(1000);
            }

            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Aspirate 4mL (2400 steps) =================================================================================================================
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);
            Coordinator.MoveNoWait(ScriptName, "Pump", 2500); // 3000
            isReady = CheckFluidics(30);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            Coordinator.SetPumpSpeed(ScriptName, "Pump", 1000);
            ScriptLog(Severity.Control, "  Dispensing Extra NIR to Waste");

            //Move pump valve to Waste ===========================================================================================================
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Dispense 5mL (3000 steps) =================================================================================================================
            Coordinator.MoveNoWait(ScriptName, "Pump", 0);
            isReady = CheckFluidics(15);
            if (!isReady || MachineState == 98) return; //MachineState = 98
        }
        private void Prime2() //need to link device data variables
        {
            string buffer = (runOutput == "Nuclei") ? "NSR" : "Buffer";
            ScriptLog(Severity.Info, $"Priming {buffer} from {r2Source}");
            ////Move valve to NSR pos ===========================================================================================================

            Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);
            //Coordinator.SetPumpPower(myScriptName, "Pump", "Default");

            ScriptLog(Severity.Info, $"  Loading {buffer}");
            if (ScriptInstanceNumber == 1 && r2Source == "Chiller") 
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "NSR");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

                Coordinator.MoveToValvePos("Coordinator", "Valve", "NSR");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }
            else  
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", $"{buffer}");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }

            //Move Pump Valve to Stand-Alone Valve ===========================================================================================================
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Aspirate 1.0mL (600 steps) =================================================================================================================
            Coordinator.MoveNoWait(ScriptName, "Pump", 480); // 700
            isReady = CheckFluidics(15);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Info, $"  Clearing {buffer} w/ Air");
            if (ScriptInstanceNumber == 2) //used to be 1
            {
                //Move valve to vent ===========================================================================================================
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }
            else
            {
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }

            //Aspirate 4mL (2400 steps) =================================================================================================================
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);
            Coordinator.MoveNoWait(ScriptName, "Pump", 2500);
            isReady = CheckFluidics(30);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            Coordinator.SetPumpSpeed(ScriptName, "Pump", 1000);
            ScriptLog(Severity.Info, $"  Dispensing Extra {buffer} to Waste");

            //Move pump valve to Waste ===========================================================================================================
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Dispense 5mL (3000 steps) =================================================================================================================
            Coordinator.MoveNoWait(ScriptName, "Pump", 0);
            isReady = CheckFluidics(15);
            if (!isReady || MachineState == 98) return; //MachineState = 98
        }
        public void BlowCannulas()
        {
            ScriptLog(Severity.Info, "Clearing Disruption and Trap Cannulas...");
            ScriptLog(Severity.Control, "Started Clearing Disruption and Trap Cannulas");

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Moving to Air");
            if (ScriptInstanceNumber == 2) //used to be 1
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                Thread.Sleep(1000);
            }
            else
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady) return; //MachineState = 98
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }

            //Pull air
            ScriptLog(Severity.Control, "   Pulling Air");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000,"");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Move SP to 3
            ScriptLog(Severity.Control, "   Moving to SP I3");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Push 1.5 via Disruption
            ScriptLog(Severity.Control, "   Clearing Disruption");
            Coordinator.MoveNoWait(ScriptName, "Pump", 1500,"");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Move SP to 5
            ScriptLog(Severity.Control, "   Moving to SP I5");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "trapCh");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Push rest via Trap
            ScriptLog(Severity.Control, "   Clearing Trap");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0,"");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "Finshed Clearing Disruption and Trap Cannulas");
            ScriptLog(Severity.Info, "Completed Clearing Disruption and Trap Cannulas...");

        }
        public void BlowDisruption()
        {
            ScriptLog(Severity.Info, "Clearing Disruption and Trap Cannulas...");
            ScriptLog(Severity.Control, "Started Clearing Disruption and Trap Cannulas");

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Moving to Air");
            if (ScriptInstanceNumber == 2) //used to be 1
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                Thread.Sleep(1000);
            }
            else
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady) return; //MachineState = 98
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }

            //Pull air
            ScriptLog(Severity.Control, "   Pulling Air");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Move SP to 3
            ScriptLog(Severity.Control, "   Moving to SP I3");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Push 1.5 via Disruption
            ScriptLog(Severity.Control, "   Clearing Disruption");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "Finshed Clearing Disruption and Trap Cannulas");
            ScriptLog(Severity.Info, "Completed Clearing Disruption and Trap Cannulas...");

        }
        public void RinseCannulas()
        {
            ScriptLog(Severity.Info, "Rinsing Disruption and Trap Cannulas...");
            ScriptLog(Severity.Control, "Started Rinsing Disruption and Trap Cannulas");

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Moving to Water");
            if (ScriptInstanceNumber == 2) //used to be 1
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                Thread.Sleep(1000);
            }
            else
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady) return; //MachineState = 98
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }

            //Pull air
            ScriptLog(Severity.Control, "   Pulling Water");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Move SP to 3
            ScriptLog(Severity.Control, "   Moving to SP I3");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Push 1.5 via Disruption
            ScriptLog(Severity.Control, "   Rinsing Disruption");
            Coordinator.MoveNoWait(ScriptName, "Pump", 1500, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Move SP to 5
            ScriptLog(Severity.Control, "   Moving to SP I5");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "trapCh");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Push rest via Trap
            ScriptLog(Severity.Control, "   Rinsing Trap");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "Finshed Rinsing Disruption and Trap Cannulas");
            ScriptLog(Severity.Info, "Completed Rinsing Disruption and Trap Cannulas...");
        }
        public void RinseDisruption()
        {
            ScriptLog(Severity.Info, "Rinsing Disruption and Trap Cannulas...");
            ScriptLog(Severity.Control, "Started Rinsing Disruption and Trap Cannulas");

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Moving to Water");
            if (ScriptInstanceNumber == 2) //used to be 1
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                Thread.Sleep(1000);
            }
            else
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady) return; //MachineState = 98
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }

            //Pull water
            ScriptLog(Severity.Control, "   Pulling Water");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 1200, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Moving to Air");
            if (ScriptInstanceNumber == 2) //used to be 1
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                Thread.Sleep(1000);
            }
            else
            {
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }

            //Pull air
            ScriptLog(Severity.Control, "   Pulling Air");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Move SP to 3
            ScriptLog(Severity.Control, "   Moving to SP I3");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "disruptCh");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Push 1.5 via Disruption
            ScriptLog(Severity.Control, "   Rinsing Disruption");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "Finshed Rinsing Disruption and Trap Cannulas");
            ScriptLog(Severity.Info, "Completed Rinsing Disruption and Trap Cannulas...");
        }
        public void BlowEnzBuffer()
        {
            //ScriptLog(Severity.Info, "Clearing Enzyme and Buffer Lines");
            ScriptLog(Severity.Control, "Started Clearing Enzyme and Buffer Lines");

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Moving to Air");
            if (ScriptInstanceNumber == 2) //used to be 1
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                Thread.Sleep(1000);
            }
            else
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady) return; //MachineState = 98
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }

            //Pull air
            ScriptLog(Severity.Control, "   Pulling Air");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Move SP to 3
            ScriptLog(Severity.Control, "   Moving to SP I3");
            Coordinator.MoveToValvePos(ScriptName, "Valve", "Enzyme");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Push 1.5 via Enzyme line
            ScriptLog(Severity.Control, "   Clearing Enzyme line");
            Coordinator.MoveNoWait(ScriptName, "Pump", 1500, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Move SP to 5
            ScriptLog(Severity.Control, "   Moving to SP I5");
            Coordinator.MoveToValvePos(ScriptName, "Valve", "Buffer");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //Push rest via Buffer Line
            ScriptLog(Severity.Control, "   Clearing Buffer line");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "Finshed Clearing Enzyme and Buffer Lines");
            //ScriptLog(Severity.Info, "Completed Clearing Enzyme and Buffer Lines...");
        }

        public void PrimeSyringe()
        {
            ScriptLog(Severity.Control, "Rinsing Common Lines...");

            if (ScriptInstanceNumber == 2) //used to be 1
            {
                ScriptLog(Severity.Control, "   Moving to Water");
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

            }
            else
            {
                ScriptLog(Severity.Control, "   Moving to Water");
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return;

                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

            }

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return;

            ScriptLog(Severity.Control, "   Pulling Water");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000);
            isReady = CheckFluidics(15);
            //Thread.Sleep(5000); //give it time to move without blocking
            //isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            Thread.Sleep(3000);

            ScriptLog(Severity.Control, "   Pointing to Waste");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //MoveToWaitDone(1500, 100000);
            ScriptLog(Severity.Control, "   Pushing All to Waste");
            //Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
            isReady = CheckFluidics(15);
            //Thread.Sleep(5000); //give it time to move without blocking
            //isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return;
        }

        public void RinseEnzBuff()
        {
            //ScriptLog(Severity.Info, "Rinsing Enzyme and Buffer Lines...");
            ScriptLog(Severity.Control, "Started Rinsing the Enzyme and Buffer Line");

            if (ScriptInstanceNumber == 2) //used to be 1
            {
                ScriptLog(Severity.Control, "   Moving to Water");
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

            }
            else
            {
                ScriptLog(Severity.Control, "   Moving to Water");
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return;

                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

            }

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return;

            ScriptLog(Severity.Control, "   Filling Syringe w/Water");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000);
            //Thread.Sleep(5000); //give it time to move without blocking
            isReady = CheckFluidics(45);
            //isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Moving to Enzyme");
            Coordinator.MoveToValvePos(ScriptName, "Valve", "Enzyme");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //MoveToWaitDone(1500, 100000);
            ScriptLog(Severity.Control, "   Rinsing Enzyme Line");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 1500,"");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //NewMoveToValve(10);
            ScriptLog(Severity.Control, "   Moving to Buffer");
            Coordinator.MoveToValvePos(ScriptName, "Valve", "Buffer");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //MoveToWaitDone(0, 100000); push the rest 
            ScriptLog(Severity.Control, "   Rinsing Buffer Line");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0,"");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "Finished Rinsing Enzyme and Buffer Lines");
            //ScriptLog(Severity.Info, "Completed Rinsing Enzyme and Buffer lines...");
        }

        public void FullSyringeRinse(string line)
        {
            //ScriptLog(Severity.Info, "Rinsing Enzyme and Buffer Lines...");
            ScriptLog(Severity.Control, "Started Rinsing the Enzyme and Buffer Line");

            if (ScriptInstanceNumber == 2) //used to be 1
            {
                ScriptLog(Severity.Control, "   Moving to Water");
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

            }
            else
            {
                ScriptLog(Severity.Control, "   Moving to Water");
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return;

                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

            }

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return;

            ScriptLog(Severity.Control, "   Filling Syringe w/Water");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 600); //was 300
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000);
            isReady = CheckFluidics(45);
            //isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            Thread.Sleep(5000);

            ScriptLog(Severity.Control, "   Moving to " + line);
            Coordinator.MoveToValvePos(ScriptName, "Valve", line);
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //MoveToWaitDone(1500, 100000);
            ScriptLog(Severity.Control, "   Rinsing " + line +" Line");
            //Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
            //isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            isReady = CheckFluidics(45);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            Thread.Sleep(5000);

            ScriptLog(Severity.Control, "Finished Rinsing " + line + " Line");
            //ScriptLog(Severity.Info, "Completed Rinsing Enzyme and Buffer lines...");
        }

        public void RinseSyringe()
        {
            ScriptLog(Severity.Control, "Rinsing Common Lines...");

            if (ScriptInstanceNumber == 2) //used to be 1
            {
                ScriptLog(Severity.Control, "   Moving to Water");
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

            }
            else
            {
                ScriptLog(Severity.Control, "   Moving to Water");
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return;

                Coordinator.MoveToValvePos(ScriptName, "Valve", "Water");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98

            }

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return;

            ScriptLog(Severity.Control, "   Pulling Water");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 300);
            Coordinator.MoveNoWait(ScriptName, "Pump", 1800);
            isReady = CheckFluidics(15);
            //Thread.Sleep(5000); //give it time to move without blocking
            //isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Pointing to Waste");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //MoveToWaitDone(1500, 100000);
            ScriptLog(Severity.Control, "   Pushing All to Waste");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
            isReady = CheckFluidics(15);
            //Thread.Sleep(5000); //give it time to move without blocking
            //isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return;

            if (ScriptInstanceNumber == 2) //used to be 1
            {
                ScriptLog(Severity.Control, "   Moving to Air");
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return;

            }
            else
            {
                ScriptLog(Severity.Control, "   Moving to Air");
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return;
            }

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return;

            ScriptLog(Severity.Control, "   Pulling Air");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", 600);
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000);
            isReady = CheckFluidics(15);
            //Thread.Sleep(5000); //give it time to move without blocking
            //isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Pointing to Waste");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            //MoveToWaitDone(1500, 100000);
            ScriptLog(Severity.Control, "   Pushing All to Waste");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0, "");
            isReady = CheckFluidics(15);
            //Thread.Sleep(5000); //give it time to move without blocking
            //isReady = IsPumpReady(5000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return;

            ScriptLog(Severity.Control, "Finished Rinsing Enzyme and Buffer Lines");
            ScriptLog(Severity.Info, "Completed Rinsing Enzyme and Buffer lines...");
        }
        public void CellCleanUp()
        {
            ScriptLog(Severity.Info, "Cleaning Cell Lines...");
            RinseEnzBuff();
            BlowEnzBuffer();
            ScriptLog(Severity.Info, "Completed Cleaning Cell Lines...");
        }
        public void CannulaCleanUp()
        {
            ScriptLog(Severity.Info, "Cleaning Cannulas Lines...");
            RinseCannulas();
            BlowCannulas();
            ScriptLog(Severity.Info, "Completed Cleaning Cannulas Lines...");
        }
        public void PushToWaste()
        {
            ScriptLog(Severity.Info, "Clearing Leftover Solution...");

            //Move SP to 2
            ScriptLog(Severity.Control, "   Moving to SP I2");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Valve");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Moving to Air");
            if (ScriptInstanceNumber == 2) //used to be 1
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
                Thread.Sleep(1000);
            }
            else
            {
                Coordinator.MoveToValvePos(ScriptName, "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady) return; //MachineState = 98
                Coordinator.MoveToValvePos("Coordinator", "Valve", "Air");
                isReady = CheckFluidics(3);
                if (!isReady || MachineState == 98) return; //MachineState = 98
            }

            //Pull air
            ScriptLog(Severity.Control, "   Pulling Air");
            Coordinator.SetPumpSpeed(ScriptName, "Pump", "Default");
            Coordinator.MoveNoWait(ScriptName, "Pump", 3000, "");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Moving to SP I6");
            Coordinator.MoveToValvePos(ScriptName, "Pump", "Waste");
            isReady = CheckFluidics(3);
            if (!isReady || MachineState == 98) return; //MachineState = 98

            ScriptLog(Severity.Control, "   Pushing to Waste");
            Coordinator.MoveNoWait(ScriptName, "Pump", 0,"");
            Thread.Sleep(5000); //give it time to move without blocking
            isReady = IsPumpReady(45000);//Await pump ready and capture any error code
            if (!isReady || MachineState == 98) return; //MachineState = 98
        }
        public void ResetFlags()
        {
            stepNum = 0;

            enzymeLoaded = false;
            deliveryStarted = false;
            deliveryFinished = false;
            incStarted = false;
            incFinished = false;
            aborting = false;
            aborted = false;
            cannulaProb = false;

        }

        #endregion
        /*----------------------------------------------------------------------------------------*/
        
        public int ExtendTime(int predictedTime)
        {
            //calculate actual time in seconds
            int duration = Convert.ToInt32((finishTime - beginTime).TotalSeconds);
            //compare to predicted time
            int extension = duration - predictedTime;
            return extension;
        }
        public void ControlTemperature(int myMachineState)
        {
            Coordinator.LEDsSetPixelPattern(ScriptName, "VerticalStage", (short)ScriptInstanceNumber, 2, 4); //LED 2 or 3 blinking yellow
            ScriptLog(Severity.Control, "| Controlling Temp..");
            var startTime = DateTime.UtcNow;
            int expectedControlTime;
            
            bool atTemp = false;
            notified = false; 

            if (myMachineState == 2)
            {
                //we are cooling
                expectedControlTime = ExpectedCoolTime();

                ScriptLog(Severity.Control, "Expected: " + expectedControlTime.ToString()); //rlm 22-09-22

                //Coordinator.GoToTemperature(myScriptName, "CartridgeTempControllerMAS", 4, 1, 10);
                //Coordinator.GoToTemperature(ScriptName, "CartridgeTempControllerMAS", 2);
                Coordinator.GoToTemperature(ScriptName, "Phase0");
                startTime = DateTime.UtcNow;
            }
            else if (myMachineState == 3)
            {
                //we are heating
                expectedControlTime = ExpectedHeatTime();

                ScriptLog(Severity.Control, "Expected: " + expectedControlTime.ToString()); //rlm 22-09-22

                //Coordinator.GoToTemperature(myScriptName, "CartridgeTempControllerMAS", 30, 1, 10);
                Coordinator.GoToTemperature(ScriptName, "Phase1");
                startTime = DateTime.UtcNow;
            }
            else
            {
                expectedControlTime = 0;

                //ScriptLog(Severity.Control, "Expected: " + expectedControlTime.ToString()); //rlm 22-09-22

                Coordinator.StopControlling(ScriptName, "CartridgeTempControllerMAS");
                ScriptLog(Severity.Control, $"stopped temp...");
            }


            atTemp = CheckTemp(MachineState);
            
            if (atTemp)
            {
                if (!notified)
                {
                    ScriptLog(Severity.Control, "Notification: Temperature Reached"); //inform the host
                    Coordinator.LEDsSetPixelPattern(ScriptName, "VerticalStage", (short)ScriptInstanceNumber, 0, 2); //LED 2 or 3 continuous green
                    notified = true;
                }
                
                ReportTemp();
            }
            else
            {
                if (expectedControlTime < 10)
                {
                    expectedControlTime = 10;

                    ScriptLog(Severity.Control, "Expected: " + expectedControlTime.ToString()); //rlm 22-09-22

                }
                ScriptLog(Severity.Control, "|-- Expected: " + expectedControlTime.ToString());
                ReportTemp();

                while ((MachineState == myMachineState) && !atTemp)
                {
                    Thread.Sleep(1000);
                    atTemp = CheckTemp(MachineState);
                    //ScriptLog(Severity.Control, $"ms: {MachineState}, myMS: {myMachineState}");
                    ReportTemp();

                    if (atTemp)
                    {
                        if (!notified)
                        {
                            ScriptLog(Severity.Control, "Notification: Temperature Reached"); //inform the host
                            Coordinator.LEDsSetPixelPattern(ScriptName, "VerticalStage", (short)ScriptInstanceNumber, 0, 2); //LED 2 or 3 continuous green
                            notified = true;
                        }
                        
                    }
                    else
                    {
                        if (expectedControlTime - (DateTime.UtcNow - startTime).TotalSeconds <= 0)
                        {
                            expectedControlTime += 5;

                            ScriptLog(Severity.Control, "Extend: 5");
                        }
                    }
                }
                //while ((MachineState == myMachineState) && atTemp)
                //{
                    ReportTemp();
                //}


                //notified = false;
                //ScriptLog(Severity.Control, "remove notified bool above^");
                //MachineState =
            }
            
        }
        public int ExpectedCoolTime()
        {
            DateTime tempStartTime;
            tempStartTime = DateTime.UtcNow;    // wasnt used elsewhere
            double startTemp = -999;
            while (startTemp < -900)
            {
                //startTemp = tempBlock.GetTemperature();
                //========================================================= REWRITE THIS! ========================================================
                startTemp = Coordinator.GetTemperatureReading(ScriptName, "ThermalBlockSensor");
                ScriptLog(Severity.Control, "| Start Cool Temp " + startTemp.ToString());
                Thread.Sleep(500);
                Application.DoEvents();
            }
            int timeToCool = 0;
            if (startTemp > 2)
            {
                double tempRaw = startTemp;
                double tempExtended = Math.Round(tempRaw, 0);
                int temp = Convert.ToInt32(tempExtended);

                timeToCool = Convert.ToInt32(Math.Round((((-0.233) * Math.Pow(tempRaw, 2.0)) + ((27.889) * (tempRaw)) + 26.78), 2));
            }
            ScriptLog(Severity.Control, "|- Time to Cool " + timeToCool.ToString());
            return timeToCool;
        }
        public int ExpectedHeatTime()
        {
            DateTime tempStartTime;
            tempStartTime = DateTime.UtcNow;    // wasnt used elsewhere
            double startTemp = -999;
            while (startTemp < -900)
            {
                //startTemp = tempBlock.GetTemperature();
                //========================================================= REWRITE THIS! ========================================================
                startTemp = Coordinator.GetTemperatureReading(ScriptName, "ThermalBlockSensor");
                ScriptLog(Severity.Control, "| Start Heat Temp " + startTemp.ToString());
                Thread.Sleep(500);
                Application.DoEvents();
            }
            int timeToHeat = 0;
            if (startTemp < 60)
            {
                double tempExtended = Math.Round(startTemp, 0);
                int temp = Convert.ToInt32(tempExtended);

                timeToHeat = Convert.ToInt32((-7.5018 * (startTemp)) + 408.46);
            }
            ScriptLog(Severity.Control, "|- Time to Heat " + timeToHeat.ToString());
            return timeToHeat;
        }
        public bool CheckTemp(int _machineState)
        {
            bool TempReached = false;
            double myTemp = -999;
            //========================================================= REWRITE THIS! ========================================================
            while (myTemp < -100)
            {
                myTemp = Coordinator.GetTemperatureReading(ScriptName, "ThermalBlockSensor");
                Thread.Sleep(500);
                Application.DoEvents();
                if (_machineState != MachineState)
                    break;
            }
            if (_machineState == 3)
            {
                if (myTemp >= 39) 
                {
                    TempReached = true;
                }
            }
            else if (_machineState == 2)
            {
                if (myTemp <= 4) 
                {
                    TempReached = true;
                }

            }
            else
            {
                TempReached = true;

            }
            return TempReached;
        } 
        public void ReportTemp()
        {
            Thread.Sleep(1000);
            double blockTemp, ambTemp; //, hStinkTemp;
            blockTemp = Coordinator.GetTemperatureReading(ScriptName, "ThermalBlockSensor");
            ambTemp = Coordinator.GetTemperatureReading(ScriptName, "AmbientSensor");
            //hStinkTemp = Coordinator.GetTemperatureReading(myScriptName, "HeatSinkSensor");
            ScriptLog(Severity.Control, $"|-- Block Temp: {blockTemp.ToString()} | Ambient Temp: {ambTemp.ToString()}"); //, Heat Sink Temp: {hStinkTemp}" );
        }
        private bool IsPumpReady(int msWait)
        {
            int pumpErrorCode = 0;
            bool isReady;
            //NoError = 0, Initialization = 1, InvalidCommand = 2, InvalidOperand = 3, InvalidCmdSequence = 4, FluidDetection = 5
            //FailedEEPROM = 6, DeviceNotInitialized = 7, Unknown8 = 8, PlungerOverload = 9, ValveOverload = 10, PlungerMoveNotAllowed = 11
            //Unknown12 = 12, Unknown13 = 13, FailedADC = 14, CommandOverflow = 15,

            isReady = Coordinator.WaitDone(ScriptName, "Pump", msWait, ref pumpErrorCode);
            if (!isReady)
            {
                //ScriptLog(Severity.Control, "Pump Not Ready...");
                if (pumpErrorCode > 0)
                {
                    ScriptLog(Severity.Control, "Pump Error " + pumpErrorCode.ToString());
                    LogStateChange(4, 98);
                    MachineState = 98; //error state
                }
                return false;
            }
            //ScriptLog(Severity.Control, "Pump Is Ready...");
            return true;
        }
        private bool CheckFluidics(int sec)
        {
            bool ready = false;
            int time = sec * 4;
            for (int i = 0; i < time && !abortRequested; i++)
            {
                Thread.Sleep(250); //give it time to move without blocking
                ready = IsPumpReady(100); //Await pump ready and capture any error code
                                          //ScriptLog(Severity.Control, "Is Pump Ready Yet? " + ready);
                if (ready)
                {
                    i = time;
                }

            }
            return ready;
        }
        private bool CheckStepper(int sec)
        {
            int stepperErrorCode = 0;
            for (int i = 0; i < sec && !abortRequested; i++)
            {
                if (Coordinator.WaitDone(ScriptName, "VerticalDrive", 100, ref stepperErrorCode))
                {
                    Thread.Sleep(1000);
                }
                else
                {
                    return true;
                }
            }
            return false;
        }
        private void LogStateChange(int s0, int s1)
        {
            //It is important to log all state changes!

            //Do Not Report state change if no change!! <=====================================================================================
            if (s0 != s1)
                ScriptLog(Severity.Control, string.Format("State Change: {0} to {1}", s0, s1));
        }
        private void BumpScriptEventHandler(object sender, BumpScriptEventArgs args)
        {
            //Change Machine State
            //System.Diagnostics.Debugger.Launch();
            //System.Diagnostics.Debugger.Break();

            int newState = args.NewState;
            ScriptLog(Severity.Control, "within bump");
            LogStateChange(MachineState, newState);

            //if (newState == 0 && (MachineState == 2 || MachineState == 3 || MachineState == 4))
            //{
            //    Coordinator.StopControlling(ScriptName, "CartridgeTempControllerMAS");
            //}

            MachineState = newState;
            ScriptLog(Severity.Control, "Machine State after bump: " + MachineState);

        }
        private void AbortRequestEventHandler(object sender, EventArgs args)
        {
            //Take immediate action on abort, such as stopping the stepper motor
            //System.Windows.Forms.MessageBox.Show("Abort Requested"); //just for demo
            ScriptLog(Severity.Control, "Abort Requested");

        }
        private void SetParametersEventHandler(object sender, EventArgs args)
        {
            RefreshProtocolParameters();
            //we can now take whatever action is needed (e.g. check new temperature set points)

            string myCellType = ((CellType)pParams.CellType).ToString();
            ScriptLog(Severity.Info, "CellType: " + myCellType);
            ScriptLog(Severity.Info, "Temp Control Type: " + pParams.ControlParameters.IncubationTemp.ToString());

            if (MachineState == 0 || MachineState == 2 || MachineState == 3)
            {
                if (pParams.ControlParameters.IncubationTemp == 0)
                {
                    if (MachineState != 2)
                    {
                        LogStateChange(0, 2);
                        MachineState = 2; //cool
                    }
                }
                else if (pParams.ControlParameters.IncubationTemp == 2)
                {
                    if (MachineState != 3)
                    {
                        LogStateChange(0, 3);
                        MachineState = 3; //heat
                    }
                }
                else if (pParams.ControlParameters.IncubationTemp == 1)
                {
                    if (MachineState != 0)
                    {
                        LogStateChange(MachineState, 0);
                        MachineState = 0; //rt
                    }
                }
            }
            ScriptLog(Severity.Info, "Machine State: " + MachineState);
        }
        private void HardwareInitializedEventHandler(object sender, EventArgs args)
        {
            ScriptLog(Severity.Control, "Hardware Initialized Event Received");
            LogStateChange(MachineState, 0);
            MachineState = 0;
        }

        #region Calibration~need to update OmegaScriptCommon Lib
        /*
        public void Calibrate()
        {
            var value = myDeviceData.TMC2209StepperParameters["BayScript1:TMC2209StepperParameterSet1"];
            //var value2 = myDeviceData.TMC2209StepperParameters["BayScript2:TMC2209StepperParameterSet1"];
            int B1offset = value.VerticalOffset;
            //int B2offset = value2.VerticalOffset;


            #region Variables 
            int f = 0; //for creep loop
            string steplossBay1 = " ", steploss2Bay1 = " ";
            int myStepB1 = 0, overallBay1Loss = 0, bottomBay1 = 0;

            string direction;
            short RPM = 95;
            #endregion

            if (B1offset >= 0) // && B2offset >= 0)
            {
                B1offset = -20000;
                //B2offset = -20000;
            }

            ScriptLog(Severity.Info, "Calibration Started");
            #region Region 1-3
            
            #region 1. Offset Finding Part I

            ScriptLog(Severity.Info, "Determining Bottom 1x Resolution");

            #region A. Initialize Stepper
            ScriptLog(Severity.Info, "Initializing Stepper..."); //record to log
            myVerticalStage.Initialize(1);
            //myVerticalStage.Initialize(2);

            //ScriptLog(Severity.Info, "Initializing Syringe and Valves..."); //record to log
            //myCavro.Initialize(3);
            #endregion

            #region B. Creep Loop
            myVerticalStage.MoveToWaitDone(1, -5000);
            //myVerticalStage.MoveToWaitDone(2, -5000);
            f = 1;
            while (myVerticalStage.GetFlagState(1) == "0")
            {
                //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
                myVerticalStage.MoveToWaitDone(1, -5000 + (1000 * f));
                //myVerticalStage.MoveRelToWaitDone(1, 5000 + (1000 * f));
                f++;
            }
            //while (myVerticalStage.GetFlagState(2) == "0")
            //{
            //    myVerticalStage.MoveToWaitDone(2, -5000 + (1000 * f));
            //    f++;
            //}
            steplossBay1 = myVerticalStage.GetPosition(1);
            //string steplossBay2 = myVerticalStage.GetPosition(2);
            ScriptLog(Severity.Info, "Steps to uncover home sensor: " + steplossBay1); //record to log
            //ScriptLog(Severity.Info, "Steps to uncover home sensor: " + steplossBay2);
            #endregion

            #region C. Connect to Cap
            ScriptLog(Severity.Info, "Connecting to Grinder Cap..."); //record to log
            myVerticalStage.MoveCheckInterlock(1, 175000 + value.EngagePosition);
            //myVerticalStage.MoveCheckInterlock(2, 120000);
            #region Rotate to Connect
            RPM = 95;
            for (int i = 0; i < 1; i++) //grind for 1 cycles
            {
                direction = "forward"; //grinding direction set to forward
                myRotator.SetMotorRPM(1, RPM, direction); //grind at set speed and direction until stop command sent
                //myRotator.SetMotorRPM(2, RPM, direction); //=======> may have to change
                Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                myRotator.MotorStop(1); //Stop grinding motor
                //myRotator.MotorStop(2);

                //direction = "reverse"; //grinding direction set to reverse
                //rotator.SetMotorRPM(RPM, direction); //grind at set speed and direction until stop command sent
                //Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                //rotator.MotorStop(); //Stop grinding motor
            }
            #endregion
            #endregion

            #region D. Gross Find Bottom

            #region OneStep
            myStepB1 = 175000; //for the first offset find this needs to be high
            //int myStepB2 = 275000;
            myVerticalStage.MoveToWaitDone(1, myStepB1);
            //myVerticalStage.MoveToWaitDone(2, myStepB2);
            #endregion

            #endregion

            #region E. Move Stepper Back Up
            ScriptLog(Severity.Info, "Bay 1's Flag state is:" + myVerticalStage.GetFlagState(1));
            ScriptLog(Severity.Info, "Bay 2's Flag state is:" + myVerticalStage.GetFlagState(2));
            ScriptLog(Severity.Info, "Moving Stepper to Position 0");
            myVerticalStage.MoveToWaitDone(1, -5000); //had at 0
            //myVerticalStage.MoveToWaitDone(2, -5000);
            ScriptLog(Severity.Info, "Bay 1's Flag state is:" + myVerticalStage.GetFlagState(1)); //0 means it is closed
            ScriptLog(Severity.Info, "Bay 2's Flag state is:" + myVerticalStage.GetFlagState(2));
            #endregion

            #region F. Creep Loop 2
            f = 1;
            while (myVerticalStage.GetFlagState(1) == "0")
            {
                //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
                myVerticalStage.MoveToWaitDone(1, -5000 + (1000 * f));
                //myVerticalStage.MoveRelToWaitDone(1, 5000 + (1000 * f));
                f++;
            }
            //while (myVerticalStage.GetFlagState(2) == "0")
            //{
            //    //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
            //    myVerticalStage.MoveToWaitDone(2, -5000 + (1000 * f));
            //    f++;
            //}
            steploss2Bay1 = myVerticalStage.GetPosition(1);
            //string steploss2Bay2 = myVerticalStage.GetPosition(2);
            ScriptLog(Severity.Info, "New steps to uncover home sensor:" + steploss2Bay1); //record to log
                                                                                           //ScriptLog(Severity.Info, "New steps to uncover home sensor:" + steploss2Bay2);
            #endregion

            #region G. Calculate Gross Offset
            overallBay1Loss = Convert.ToInt32(steploss2Bay1) - Convert.ToInt32(steplossBay1); //Bay1's loss
            ScriptLog(Severity.Info, $"overallLossB1: {overallBay1Loss}");
            //int overallBay2Loss = Convert.ToInt32(steploss2Bay2) - Convert.ToInt32(steplossBay2); //Bay2's loss
            bottomBay1 = myStepB1 - overallBay1Loss;
            //int bottomBay2 = myStepB2 - overallBay2Loss;
            ScriptLog(Severity.Info, "Distance to Bottom is around:" + bottomBay1);
            //ScriptLog(Severity.Info, "Bottom is around:" + bottomBay2);
            #endregion

            ScriptLog(Severity.Info, "Offset Measuring Part I Complete.");


            #endregion

            #region 2. Offset Finding Part II

            ScriptLog(Severity.Info, "Determining Bottom 10x Resolution");

            #region A. Initialize Stepper
            ScriptLog(Severity.Info, "Initializing Stepper..."); //record to log
            myVerticalStage.Initialize(1);
            //myVerticalStage.Initialize(2);

            //ScriptLog(Severity.Info, "Initializing Syringe and Valves..."); //record to log
            //myCavro.Initialize(3);
            #endregion

            #region B. Creep Loop
            myVerticalStage.MoveToWaitDone(1, -1000); //was -1000
            //myVerticalStage.MoveToWaitDone(2, -500);
            f = 1;
            while (myVerticalStage.GetFlagState(1) == "0")
            {
                //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
                myVerticalStage.MoveToWaitDone(1, -1000 + (100 * f));
                //myVerticalStage.MoveRelToWaitDone(1, 1000 + (100 * f));
                f++;
            }
            //while (myVerticalStage.GetFlagState(2) == "0")
            //{
            //    //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
            //    myVerticalStage.MoveToWaitDone(2, -500 + (100 * f));
            //    f++;
            //}
            steplossBay1 = myVerticalStage.GetPosition(1);
            //steplossBay2 = myVerticalStage.GetPosition(2);
            ScriptLog(Severity.Info, "Steps to uncover home sensor:" + steplossBay1); //record to log
            //ScriptLog(Severity.Info, "Steps to uncover home sensor:" + steplossBay2);
            #endregion

            #region C. Connect to Cap
            ScriptLog(Severity.Info, "Connecting to Grinder Cap..."); //record to log
            myVerticalStage.MoveCheckInterlock(1, 175000 + value.EngagePosition);
            //myVerticalStage.MoveCheckInterlock(2, 120000);
            #region Rotate to Connect
            for (int i = 0; i < 1; i++) //grind for 1 cycles
            {
                direction = "forward"; //grinding direction set to forward
                myRotator.SetMotorRPM(1, RPM, direction); //grind at set speed and direction until stop command sent
                //myRotator.SetMotorRPM(2, RPM, direction);
                Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                myRotator.MotorStop(1); //Stop grinding motor
                //myRotator.MotorStop(2);

                //direction = "reverse"; //grinding direction set to reverse
                //rotator.SetMotorRPM(RPM, direction); //grind at set speed and direction until stop command sent
                //Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                //rotator.MotorStop(); //Stop grinding motor
            }
            #endregion
            #endregion

            #region D. Gross Find Bottom

            #region OneStep
            myStepB1 = bottomBay1 + 1000; //should equal close to the bottom calculated in the previous step
            //myStepB2 = bottomBay2 + 1000;
            myVerticalStage.MoveToWaitDone(1, myStepB1);
            //myVerticalStage.MoveToWaitDone(2, myStepB2);
            #endregion

            #endregion

            #region E. Move Stepper Back Up
            ScriptLog(Severity.Info, "Bay 1's Flag state is:" + myVerticalStage.GetFlagState(1));
            //ScriptLog(Severity.Info, "Bay 2's Flag state is:" + myVerticalStage.GetFlagState(2));
            ScriptLog(Severity.Info, "Moving Stepper to Position 0");
            myVerticalStage.MoveToWaitDone(1, -1000);
            //myVerticalStage.MoveToWaitDone(2, -500);
            ScriptLog(Severity.Info, "Bay 1's Flag state is:" + myVerticalStage.GetFlagState(1));
            //ScriptLog(Severity.Info, "Bay 2's Flag state is:" + myVerticalStage.GetFlagState(2));
            #endregion

            #region F. Creep Loop 2
            f = 1;
            while (myVerticalStage.GetFlagState(1) == "0")
            {
                //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
                myVerticalStage.MoveToWaitDone(1, -1000 + (100 * f));
                //myVerticalStage.MoveRelToWaitDone(1, -1000 + (100 * f));
                f++;
            }
            //while (myVerticalStage.GetFlagState(2) == "0")
            //{
            //    //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
            //    myVerticalStage.MoveToWaitDone(2, -500 + (100 * f));
            //    f++;
            //}
            steploss2Bay1 = myVerticalStage.GetPosition(1);
            //steploss2Bay2 = myVerticalStage.GetPosition(2);
            ScriptLog(Severity.Info, "New steps to uncover home sensor:" + steploss2Bay1); //record to log
            //ScriptLog(Severity.Info, "New steps to uncover home sensor:" + steploss2Bay2);
            #endregion

            #region G. Calculate Gross Offset
            overallBay1Loss = Convert.ToInt32(steploss2Bay1) - Convert.ToInt32(steplossBay1);
            //overallBay2Loss = Convert.ToInt32(steploss2Bay2) - Convert.ToInt32(steplossBay2);
            bottomBay1 = myStepB1 - overallBay1Loss;
            //bottomBay2 = myStepB2 - overallBay2Loss;
            ScriptLog(Severity.Info, "Bay 1's New Distance to Bottom is around:" + bottomBay1);
            //ScriptLog(Severity.Info, "Bay 2's New bottom is around:" + bottomBay2);
            #endregion

            ScriptLog(Severity.Info, "Offset Measuring Part II Complete.");
            #endregion

            #region 3. Offset Finding Part III

            ScriptLog(Severity.Info, "Determining Primary Offset");

            #region A. Initialize Stepper
            ScriptLog(Severity.Info, "Initializing Stepper..."); //record to log
            myVerticalStage.Initialize(1);
            //myVerticalStage.Initialize(2);

            //ScriptLog(Severity.Info, "Initializing Syringe and Valves..."); //record to log
            //myCavro.Initialize(3);
            #endregion

            #region B. Creep Loop
            myVerticalStage.MoveToWaitDone(1, -1000); //was -1000
            //myVerticalStage.MoveToWaitDone(2, -500);
            f = 1;
            while (myVerticalStage.GetFlagState(1) == "0") //Og was 0
            {
                //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
                myVerticalStage.MoveToWaitDone(1, -1000 + (10 * f));
                //myVerticalStage.MoveRelToWaitDone(1, 500 + (10 * f));
                f++;
            }
            //while (myVerticalStage.GetFlagState(2) == "0")
            //{
            //    //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
            //    myVerticalStage.MoveToWaitDone(2, -500 + (10 * f));
            //    f++;
            //}
            steplossBay1 = myVerticalStage.GetPosition(1);
            //steploss2Bay2 = myVerticalStage.GetPosition(2);
            ScriptLog(Severity.Info, "Bay 1's Steps to uncover home sensor:" + steplossBay1); //record to log
            //ScriptLog(Severity.Info, "Bay 2's Steps to uncover home sensor:" + steplossBay2);
            #endregion

            #region C. Connect to Cap
            ScriptLog(Severity.Info, "Connecting to Grinder Cap..."); //record to log
            myVerticalStage.MoveCheckInterlock(1, 175000 + value.EngagePosition);
            //myVerticalStage.MoveCheckInterlock(2, 120000);
            #region Rotate to Connect
            for (int i = 0; i < 1; i++) //grind for 1 cycles
            {
                direction = "forward"; //grinding direction set to forward
                myRotator.SetMotorRPM(1, RPM, direction); //grind at set speed and direction until stop command sent
                //myRotator.SetMotorRPM(2, RPM, direction);
                Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                myRotator.MotorStop(1); //Stop grinding motor
                //myRotator.MotorStop(2);

                //direction = "reverse"; //grinding direction set to reverse
                //rotator.SetMotorRPM(RPM, direction); //grind at set speed and direction until stop command sent
                //Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                //rotator.MotorStop(); //Stop grinding motor
            }
            #endregion
            #endregion

            #region D. Gross Find Bottom

            #region OneStep
            myStepB1 = bottomBay1 + 1000; //should equal close to the bottom calculated in the previous step
            //myStepB2 = bottomBay2 + 1000;
            myVerticalStage.MoveToWaitDone(1, myStepB1);
            //myVerticalStage.MoveToWaitDone(2, myStepB2);
            #endregion

            #endregion

            #region E. Move Stepper Back Up
            ScriptLog(Severity.Info, "Bay 1's Flag state is:" + myVerticalStage.GetFlagState(1));
            //ScriptLog(Severity.Info, "Bay 2's Flag state is:" + myVerticalStage.GetFlagState(2));
            ScriptLog(Severity.Info, "Moving Stepper to Position 0");
            myVerticalStage.MoveToWaitDone(1, -1000);
            //myVerticalStage.MoveToWaitDone(2, -500);
            ScriptLog(Severity.Info, " Bay 1's Flag state is:" + myVerticalStage.GetFlagState(1));
            //ScriptLog(Severity.Info, "Bay 2's Flag state is:" + myVerticalStage.GetFlagState(2));
            #endregion

            #region F. Creep Loop 2
            f = 1;
            while (myVerticalStage.GetFlagState(1) == "0")
            {
                //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
                myVerticalStage.MoveToWaitDone(1, -1000 + (10 * f));
                //myVerticalStage.MoveRelToWaitDone(1, 500 + (10 * f));
                f++;
            }
            //while (myVerticalStage.GetFlagState(2) == "0")
            //{
            //    //ScriptLog(Severity.Info, "Flag state is:" + verticalStage.GetFlagState());
            //    myVerticalStage.MoveToWaitDone(2, -500 + (10 * f));
            //    f++;
            //}
            steploss2Bay1 = myVerticalStage.GetPosition(1);
            //steploss2Bay2 = myVerticalStage.GetPosition(2);
            ScriptLog(Severity.Info, "Bay 1's New steps to uncover home sensor:" + steploss2Bay1); //record to log
            //ScriptLog(Severity.Info, "Bay 2's New steps to uncover home sensor:" + steploss2Bay2);
            #endregion

            #region G. Calculate Gross Offset
            overallBay1Loss = Convert.ToInt32(steploss2Bay1) - Convert.ToInt32(steplossBay1);
            //overallBay2Loss = Convert.ToInt32(steploss2Bay2) - Convert.ToInt32(steplossBay2);
            bottomBay1 = myStepB1 - overallBay1Loss;
            //bottomBay2 = myStepB2 - overallBay2Loss;
            int newBay1Offset = bottomBay1 - 175000; //276000
            //int newBay2Offset = bottomBay2 - 276000;
            ScriptLog(Severity.Info, "Bay 1's New Offset is:" + newBay1Offset);
            ScriptLog(Severity.Info, "Bay 1's New Distance to Bottom is:" + bottomBay1);
            //ScriptLog(Severity.Info, "Bay 2's New Offset is:" + newBay2Offset);
            #endregion

            ScriptLog(Severity.Info, "Offset Measuring Part III Complete.");
            #endregion
            
            #endregion


            #region 4. Offset Finding Part IV

            ScriptLog(Severity.Info, "Determining Final Offset");
            //TMC2209StepperParameterSet stepper;

            #region Variables

            #region Common 
            int stepSize = 200;
            int stepAmnt = 30;
            int totSteps = (2 * stepAmnt) + 1; //# steps before target offset, target offset, and # steps after target offset

            bool alreadyStalled = false;
            string filename = DateTime.Now.ToString("yyyy_MM_dd_HHmmss");
            #endregion

            #region Bay1 
            int encoderB1Pos1;
            int encoderB1Pos2;
            int encB1Distance;
            int encB1GoalFor;
            int encB1GoalRev;
            int encB1GoalAvg;
            double encB1ThresholdPercent = 0.9; //was 0.7
            int encB1Threshold;
            int startB1Step = (bottomBay1 - (stepAmnt * stepSize));
            int stepBay1 = startB1Step;
            int stalledB1point = 0;
            List<string> bay1GrindProfile = new List<string>();
            List<int> bay1StallSteps = new List<int>();
            #endregion

            #region Bay2 
            //int encoderB2Pos1;
            //int encoderB2Pos2;
            //int encB2Distance;
            //int encB2GoalFor;
            //int encB2GoalRev;
            //int encB2GoalAvg;
            //double encB2ThresholdPercent = 0.9; //was 0.7
            //int encB2Threshold;
            //int startB2Step = (bottomBay2 - (stepAmnt * stepSize));
            //int stepBay2 = startB2Step;
            //List<string> bay2GrindProfile = new List<string>();
            //List<int> bay2StallSteps = new List<int>();
            #endregion

            //int stepnum = (2 * (3000 / stepSize)) + 1;
            #endregion

            #region A. Reinitialize Stepper, RoboClaw
            ScriptLog(Severity.Info, "Re-initializing Stepper");
            //myVerticalStage.Initialize(1);
            //myVerticalStage.Initialize(2);
            Coordinator.Initialize();
            #endregion

            #region B. Refine Offset
            ScriptLog(Severity.Info, "Rotation Offset Test");
            encoderB1Pos1 = myRotator.ReadEncoderPosition(1);
            //encoderB2Pos1 = myRotator.ReadEncoderPosition(2);
            ScriptLog(Severity.Info, "Starting Encoder Position = " + encoderB1Pos1); //record to log
            //ScriptLog(Severity.Info, "Starting Encoder Position = " + encoderB2Pos1);
            int timesStalled = 0;

            for (int j = 1; j <= 1; j++) //to go from 25-195 needs to be 17
            {
                int logStep = 0;

                #region Setup Logging
                bay1GrindProfile.Add("Bay 1's Constant Velocity Disabled," + RPM.ToString());
                bay1GrindProfile.Add("Bay 1's Step #, B1 Step, B1 Rot. Dir, B1 Rot. Dist");
                //bay2GrindProfile.Add("Bay 2's Constant Velocity Disabled," + RPM.ToString());
                //bay2GrindProfile.Add("Bay 2's Step #, B2 Step, B2 Rot. Dir, B2 Rot. Dist");
                #endregion

                #region Initial Rotation

                //rotate forward with constant velocity for 4 seconds
                direction = "forward"; //grinding direction set to forward
                myRotator.SetMotorRPM(1, RPM, direction); //grind at set speed and direction until stop command sent
                //myRotator.SetMotorRPM(2, RPM, direction);
                Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                myRotator.MotorStop(1); //Stop grinding motor
                //myRotator.MotorStop(2);

                //calculate distance traveled forward
                encoderB1Pos2 = myRotator.ReadEncoderPosition(1);
                //encoderB2Pos2 = myRotator.ReadEncoderPosition(2);
                encB1GoalFor = encoderB1Pos2 - encoderB1Pos1;
                //encB2GoalFor = encoderB2Pos2 - encoderB2Pos1;
                bay1GrindProfile.Add(logStep + ", Free Rotation , " + direction + ", " + (encB1GoalFor));
                //bay2GrindProfile.Add(logStep + ", Free Rotation , " + direction + ", " + (encB2GoalFor));
                ScriptLog(Severity.Info, "Bay 1's Travel = " + (encB1GoalFor)); //record to log
                //ScriptLog(Severity.Info, "Bay 2's Travel = " + (encB2GoalFor));

                //rotate reverse with constant velocity for 4 seconds
                direction = "reverse"; //grinding direction set to reverse
                myRotator.SetMotorRPM(1, RPM, direction); //grind at set speed and direction until stop command sent
                //myRotator.SetMotorRPM(2, RPM, direction);
                Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                myRotator.MotorStop(1); //Stop grinding motor
                //myRotator.MotorStop(2);

                //calculate distance traveled reverse
                encoderB1Pos1 = myRotator.ReadEncoderPosition(1);
                //encoderB2Pos1 = myRotator.ReadEncoderPosition(2);
                encB1GoalRev = encoderB1Pos2 - encoderB1Pos1;
                //encB2GoalRev = encoderB2Pos2 - encoderB2Pos1;
                bay1GrindProfile.Add(" , , " + direction + ", " + (encB1GoalRev));
                //bay2GrindProfile.Add(" , , " + direction + ", " + (encB2GoalRev));
                ScriptLog(Severity.Info, "Bay 1's Travel = " + (encB1GoalRev)); //record to log
                //ScriptLog(Severity.Info, "Bay 2's Travel = " + (encB2GoalRev));
                logStep++;

                //calculate min encoder value allowed
                encB1GoalAvg = (encB1GoalFor + encB1GoalRev) / 2;
                //encB2GoalAvg = (encB2GoalFor + encB2GoalRev) / 2;
                encB1Threshold = Convert.ToInt32(encB1GoalAvg * encB1ThresholdPercent);
                //encB2Threshold = Convert.ToInt32(encB2GoalAvg * encB2ThresholdPercent);
                ScriptLog(Severity.Info, "Bay 1's Min Encoder Value Allowed : " + encB1Threshold); //record to log
                //ScriptLog(Severity.Info, "Bay 2's Min Encoder Value Allowed : " + encB2Threshold);
                #endregion

                #region Connect to Cap

                ScriptLog(Severity.Info, "Connecting to Grinder Cap..."); //record to log
                myVerticalStage.MoveCheckInterlock(1, 175000 + value.EngagePosition);
                //myVerticalStage.MoveCheckInterlock(2, 120000);

                direction = "forward"; //grinding direction set to forward
                myRotator.SetMotorRPM(1, RPM, direction);
                //myRotator.SetMotorRPM(2, RPM, direction);
                Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                myRotator.MotorStop(1); //Stop grinding motor
                //myRotator.MotorStop(2);

                encoderB1Pos2 = myRotator.ReadEncoderPosition(1);
                //encoderB2Pos2 = myRotator.ReadEncoderPosition(2);
                encB1Distance = encoderB1Pos2 - encoderB1Pos1;
                //encB2Distance = encoderB2Pos2 - encoderB2Pos1;
                if (encB1Distance < (encB1Threshold)) // && encB2Distance < (encB2Threshold))
                {
                    ScriptLog(Severity.Info, "B1 Grinder stalled at step: " + (bottomBay1 + value.EngagePosition)); //record to log, 210000+B1offset
                    //ScriptLog(Severity.Info, "B1 Grinder stalled at step: " + (210000 + B2offset));
                    bay1StallSteps.Add(bottomBay1 + value.EngagePosition); //210000+B1offset
                    //bay2StallSteps.Add(210000 + B2offset);
                }
                //bay1GrindProfile.Add("Bay 1: " + logStep + " , Cap Engaged , " + direction + ", " + (encB1Distance));
                //bay2GrindProfile.Add("Bay 2: " + logStep + " , Cap Engaged , " + direction + ", " + (encB2Distance));
                ScriptLog(Severity.Info, "Bay 1's Travel = " + (encB1Distance)); //record to log
                //ScriptLog(Severity.Info, "Bay 2's Travel = " + (encB2Distance));

                direction = "reverse"; //grinding direction set to reverse
                myRotator.SetMotorRPM(1, RPM, direction);
                //myRotator.SetMotorRPM(2, RPM, direction);
                Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                myRotator.MotorStop(1); //Stop grinding motor
                //myRotator.MotorStop(2);

                encoderB1Pos1 = myRotator.ReadEncoderPosition(1);
                //encoderB2Pos1 = myRotator.ReadEncoderPosition(2);
                encB1Distance = encoderB1Pos2 - encoderB1Pos1;
                //encB2Distance = encoderB2Pos2 - encoderB2Pos1;
                if (encB1Distance < (encB1Threshold)) // && encB2Distance < (encB2Threshold))
                {
                    ScriptLog(Severity.Info, "B1 Grinder stalled at step: " + (bottomBay1 + value.EngagePosition)); //record to log, 210000
                    //ScriptLog(Severity.Info, "B1 Grinder stalled at step: " + (210000 + B2offset));
                    bay1StallSteps.Add(bottomBay1 + value.EngagePosition); //210000
                    //bay2StallSteps.Add(210000 + B2offset);
                }
                bay1GrindProfile.Add("Bay 1: " + " , , " + direction + ", " + (encoderB1Pos2 - encoderB1Pos1));
                //bay2GrindProfile.Add("Bay 2: " + " , , " + direction + ", " + (encoderB2Pos2 - encoderB2Pos1));
                ScriptLog(Severity.Info, "Bay 1's Travel = " + (encoderB1Pos2 - encoderB1Pos1)); //record to log
                //ScriptLog(Severity.Info, "Bay 2's Travel = " + (encoderB2Pos2 - encoderB2Pos1));
                logStep++;
                #endregion

                #region Rotate Steps
                ScriptLog(Severity.Info, "Grinding..."); //record to log
                for (int i = 0; i < totSteps && timesStalled < 2; i++)
                {
                    //Move stepper to specified step
                    ScriptLog(Severity.Info, "Step " + (i + 1) + " of " + totSteps); //record to log
                    ScriptLog(Severity.Info, "Bay 1: Moving to step " + stepBay1); //record to log
                    //ScriptLog(Severity.Info, "Bay 2: Moving to step " + stepBay2);
                    myVerticalStage.MoveToWaitDone(1, stepBay1);
                    //myVerticalStage.MoveToWaitDone(2, stepBay1);

                    //Rotate forward at constant power for 4 seconds
                    direction = "forward"; //grinding direction set to forward
                    myRotator.SetMotorRPM(1, RPM, direction); //grind at set speed and direction until stop command sent
                    //myRotator.SetMotorRPM(2, RPM, direction);
                    Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                    myRotator.MotorStop(1); //Stop grinding motor
                    //myRotator.MotorStop(2);

                    //check distance rotated against threshold limit
                    encoderB1Pos2 = myRotator.ReadEncoderPosition(1);
                    //encoderB2Pos2 = myRotator.ReadEncoderPosition(2);
                    encB1Distance = encoderB1Pos2 - encoderB1Pos1;
                    //encB2Distance = encoderB2Pos2 - encoderB2Pos1;
                    if (encB1Distance < encB1Threshold) // && encB2Distance < encB2Threshold)
                    {
                        ScriptLog(Severity.Info, "Bay 1: Grinder at bottom at step: " + (stepBay1)); //record to log
                        //ScriptLog(Severity.Info, "Bay 2: Grinder at bottom at step: " + (stepBay2));
                        bay1StallSteps.Add(stepBay1);
                        //bay2StallSteps.Add(stepBay2);
                        timesStalled++;
                    }
                    ScriptLog(Severity.Info, "Bay 1: Travel = " + (encoderB1Pos2 - encoderB1Pos1)); //record to log
                    //ScriptLog(Severity.Info, "Bay 2: Travel = " + (encoderB2Pos2 - encoderB2Pos1));
                    bay1GrindProfile.Add(logStep + ", " + stepBay1 + ", " + direction + ", " + (encoderB1Pos2 - encoderB1Pos1));
                    //bay1GrindProfile.Add(logStep + ", " + stepBay1 + ", " + direction + ", " + (encoderB1Pos2 - encoderB1Pos1));

                    //Rotate reverse at constant power for 4 seconds
                    direction = "reverse"; //grinding direction set to reverse
                    myRotator.SetMotorRPM(1, RPM, direction); //grind at set speed and direction until stop command sent
                    //myRotator.SetMotorRPM(2, RPM, direction);
                    Thread.Sleep(4000); //Sleep for grind //KC: was 4000
                    myRotator.MotorStop(1); //Stop grinding motor
                    //myRotator.MotorStop(2);

                    //check distance rotated against threshold limit
                    encoderB1Pos1 = myRotator.ReadEncoderPosition(1);
                    //encoderB2Pos1 = myRotator.ReadEncoderPosition(2);
                    encB1Distance = encoderB1Pos2 - encoderB1Pos1;
                    //encB2Distance = encoderB2Pos2 - encoderB2Pos1;
                    if (encB1Distance < encB1Threshold)// && encB2Distance < encB2Threshold)
                    {
                        ScriptLog(Severity.Info, "Bay 1: Grinder at bottom at step: " + (stepBay1)); //record to log
                        //ScriptLog(Severity.Info, "Bay 2: Grinder at bottom at step: " + (stepBay2));
                        bay1StallSteps.Add(stepBay1);
                        //bay2StallSteps.Add(stepBay2);
                        timesStalled++;
                    }
                    ScriptLog(Severity.Info, "Bay 1: Travel = " + (encoderB1Pos2 - encoderB1Pos1)); //record to log
                    //ScriptLog(Severity.Info, "Bay 2: Travel = " + (encoderB2Pos2 - encoderB2Pos1));
                    bay1GrindProfile.Add(" , , " + direction + ", " + (encoderB1Pos2 - encoderB1Pos1));
                    //bay2GrindProfile.Add(" , , " + direction + ", " + (encoderB2Pos2 - encoderB2Pos1));

                    stepBay1 = stepBay1 + stepSize;
                    //stepBay2 = stepBay2 + stepSize;
                }

                #endregion
            }
            #endregion

            #region C. Calculate Refined Offset
            if (bay1StallSteps.Count() >= 1) // && bay2StallSteps.Count() >= 1)
            {
                stalledB1point = bay1StallSteps[0];
                //int stalledB2point = bay2StallSteps[0];
                ScriptLog(Severity.Info, "Bay 1: Stalled at Step " + stalledB1point);
                //ScriptLog(Severity.Info, "Bay 2: Stalled at Step " + stalledB2point);

                B1offset = stalledB1point - 175000;
                //B2offset = stalledB2point - 276000;

                ScriptLog(Severity.Info, "Bay 1's Final Offset = " + B1offset);
                ScriptLog(Severity.Info, $"  Bay 1's Distance to Bottom: {stalledB1point}");
                //ScriptLog(Severity.Info, "Bay 2's Final Offset = " + B2offset);
            }
            #endregion

            ScriptLog(Severity.Info, "Offset Measuring Part IV Complete.");
            #endregion

            #region 5. Change Offset
            ScriptLog(Severity.Info, "Recording New Offset");
            //ChangeOffset(B1offset);
            myDeviceData.TMC2209StepperParameters["BayScript1:TMC2209StepperParameterSet1"].DistanceToBottom = stalledB1point;
            SaveDisToBtm();
            //myDeviceData.ChangeDisToBottom("BayScript1", stalledB1point);
            //ChangeOffset(B2offset);
            #endregion

            #region 6. End Calibration
            ScriptLog(Severity.Info, "Homing Z-Axis for Cartridge Removal");
            myVerticalStage.Initialize(1);
            //myVerticalStage.Initialize(2);
            #endregion

            

            //FIXTHIS
            //if (timesStalled < 2)
            //{
            //    MessageBox.Show("Calibration Unsuccessful.", "Calibration Complete", MessageBoxButtons.OK);
            //}
            //else
            //{
            //    MessageBox.Show("Calibration Successful.", "Calibration Complete", MessageBoxButtons.OK);
            //}

            //MessageBox.Show("Calibration Successful.", "Calibration Complete", MessageBoxButtons.OK);

            ScriptLog(Severity.Info, "Bay 1's Calibration Complete.");
            ScriptLog(Severity.Info, "Bay 2's Calibration Complete.");
        }
        
        #endregion

        */
        #endregion

        private void RunSimulatedProtocol()
        {
            //We can get an abort request
            //NOTE: state change requests while running are ignored; use Abort to stop a run

            LogStateChange(MachineState, 4);
            MachineState = 4;

            //===========================================================================================
            //First refresh the protocol parameters in case the host sent us new ones:
            RefreshProtocolParameters();
            //here is an example of how to use the params:
            string mySpecies = ((Species)pParams.Species).ToString();
            ScriptLog(Severity.Info, "Species: " + mySpecies);
            //===========================================================================================

            ScriptStartTime = DateTime.Now;
            ScriptLog(Severity.Control, "Expected: " + ScriptRunTimeSeconds.ToString());

            ProtocolStepNum = 1;
            ScriptLog(Severity.Control, "Step: Priming Reagents");
            SimulateRunTime(10, true); if (abortRequested) goto Aborted;

            ProtocolStepNum = 2;
            ScriptLog(Severity.Control, "Step: Delivering Reagents");
            SimulateRunTime(10, true); if (abortRequested) goto Aborted;

            ProtocolStepNum = 3;
            ScriptLog(Severity.Control, "Step: Engaging Cartridge");
            SimulateRunTime(10, true); if (abortRequested) goto Aborted;

            ProtocolStepNum = 4;
            ScriptLog(Severity.Control, "Step: Disrupting Sample");
            SimulateRunTime(10, true); if (abortRequested) goto Aborted;

            ProtocolStepNum = 5;
            ScriptLog(Severity.Control, "Step: Filtering Sample");
            SimulateRunTime(10, true); if (abortRequested) goto Aborted;

            ProtocolStepNum = 6;
            ScriptLog(Severity.Control, "Step: Rinsing Disruption Chamber");
            SimulateRunTime(10, true); if (abortRequested) goto Aborted;

            ProtocolStepNum = 7;
            ScriptLog(Severity.Control, "Step: Filtering Rinse");
            SimulateRunTime(10, true); if (abortRequested) goto Aborted;

            ProtocolStepNum = 8;
            ScriptLog(Severity.Control, "Step: Disengaging Cartridge");
            SimulateRunTime(10, true); if (abortRequested) goto Aborted;

            ProtocolStepNum = 9;
            ScriptLog(Severity.Info, "TestScript Successfully Run");

            if (ScriptInstanceNumber == 2)
            {
                ScriptLog(Severity.Control, "Bay2 wrapping up...");
                for (int i = 0; i < 100; i++)
                {
                    Thread.Sleep(50); //force Bay2 to finish last
                    Application.DoEvents();
                }
            }

        Aborted:
            if (abortRequested)
            {
                abortRequested = false; //clear it
                LogStateChange(4, 5);
                MachineState = 5; //abort
            }
            else
            {
                LogStateChange(4, 2);
                MachineState = 2; //go to temperature control state
            }

            ScriptLog(Severity.Info, "Protocol Run Ended");

        }

        private void SimulateAbort(int sec)
        {
            //This just wastes time to simulate an aborting script

            ScriptLog(Severity.Control, "Expected: " + sec.ToString());

            for (int j = 0; j < sec; j++)
            {
                Thread.Sleep(1000);
            }

            LogStateChange(5, 2);
            MachineState = 2; //go to temperature control state
        }

        private void SimulateRunTime(int sec, bool shouldExtend)
        {
            //This just wastes time to simulate a running script

            //if (shouldExtend) System.Windows.Forms.MessageBox.Show("RunTime: " + sec.ToString()); //just for demo

            int entryState = MachineState; //entryState is the state on entry; if it changes, return to caller

            int sec10 = sec / 10; //update at 10 second intervals for this test script

            for (int i = 0; i < sec10; i++)
            {
                //Send a status update every 10 seconds

                for (int j = 0; j < 100; j++)
                {
                    Thread.Sleep(100); //check for abort every 100ms
                    if (abortRequested) return;
                    if (MachineState != entryState) return; //<==============================================
                }

                if (shouldExtend)
                {
                    int randomDelay = randomSec.Next(1, 5);
                    Thread.Sleep(randomDelay * 1000); //simulate an unexpected delay
                    ScriptLog(Severity.Control, "Extend: " + randomDelay.ToString()); //extend the expected runtime by 2 seconds -- just for testing
                }
            }
        }

        private void ControlTemperatureCoolSimulate()
        {
            //We can get a new temp control request (heat, cool, stop) or a run request

            ControlTemperatureSimulate(9, 2);

        }

        private void ControlTemperatureHeatSimulate()
        {
            //We can get a new temp control request (heat, cool, stop) or a run request

            ControlTemperatureSimulate(7, 3);

        }

        private void ControlTemperatureSimulate(int expectedControlTime, int myMachineState)
        {
            bool wasExtended = false;

            ScriptLog(Severity.Control, "Expected: " + expectedControlTime.ToString());

            int iCnt = 0;

            while (MachineState == myMachineState)
            {
                Thread.Sleep(100); //do heating

                //Simulate reaching target temp:
                if (iCnt < (expectedControlTime * 10))
                    iCnt += 1;
                else if (iCnt == (expectedControlTime * 10))
                {
                    if (!wasExtended)
                    {
                        //Extend time once for test and demo purposes:
                        wasExtended = true;
                        int randomDelay = randomSec.Next(1, 5);
                        expectedControlTime += randomDelay;
                        ScriptLog(Severity.Control, "Extend: " + randomDelay.ToString()); //extend the expected runtime by 1 to 5 seconds -- just for testing
                    }
                    else
                    {
                        ScriptLog(Severity.Control, "Notification: Temperature Reached"); //inform the host
                        iCnt = (expectedControlTime * 10) + 1; //don't check again
                    }
                }
            }
        }

    }
}
